==== Git und TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Git wird bei Windows-Entwicklern immer populärer. Falls Sie Code unter Windows schreiben, ist es durchaus möglich, dass Sie den Team Foundation Server (TFS) von Microsoft verwenden.
TFS ist eine Collaboration-Suite, die Fehler- und Workitem-Tracking, Prozess-Support für Scrum (und andere), Code-Review und Versionskontrolle umfasst.
Es gibt da ein wenig Verwirrung im Vorfeld: *TFS* ist der Server, der die Kontrolle des Quellcodes sowohl mit Git als auch mit einem eigenen, benutzerdefinierten VCS unterstützt, das Microsoft *TFVC* (Team Foundation Version Control) genannt hat.
Die Git-Anbindung ist ein neueres Feature für TFS (ausgeliefert mit Version 2013). Daher beziehen sich alle Tools, die älter sind, auf den Versionskontrollteil als „TFS“, auch wenn sie hauptsächlich mit TFVC arbeiten.

Wenn Sie sich in einem Team befinden, das TFVC verwendet, aber lieber Git als Ihren Versionskontroll-Client verwenden möchten, dann gibt es dafür ein Projekt für Sie.

===== Welches Tool?

(((git-tf)))(((git-tfs)))
Tatsache: Es gibt zwei: git-tf und git-tfs.

Git-tfs (finden Sie unter https://github.com/git-tfs/git-tfs[]) ist ein .NET-Projekt und läuft (derzeit) nur unter Windows.
Um mit Git-Repositories zu arbeiten, verwendet es die .NET-Bindings für libgit2, eine library-orientierte Umsetzung von Git, die hochperformant ist und viel Flexibilität in den Tiefen eines Git-Repositories ermöglicht.
Libgit2 ist keine vollständige Implementierung von Git, weshalb git-tfs den Kommandozeilen-Git-Client für einige Operationen aufrufen wird. Es gibt von daher keine expliziten Einschränkungen, was mit den Git-Repositories gemacht werden kann.
Die Unterstützung von TFVC-Funktionen ist sehr ausgereift, da es Visual-Studio-Assemblys für Serveroperationen verwendet.
Das erfordert den Zugriff auf diese Assemblys und bedeutet, dass Sie eine aktuelle Version von Visual Studio (jede Edition seit Version 2010, einschließlich Express seit Version 2012) oder das Visual Studio SDK installieren müssen.

[CAUTION]
====
Git-tf ist End-of-Life (EOL), es werden keine Aktualisierungen mehr geben.
Es wird auch nicht mehr von Microsoft unterstützt.
====

Git-tf (erreichbar unter https://gittf.codeplex.com[]) ist ein Java-Projekt und läuft als solches auf jedem Computer mit einer Java-Laufzeitumgebung.
Die Schnittstelle zu Git-Repositories erfolgt über JGit (eine Git-Implementierung von JVM (Java Virtual Machine)), was bedeutet, dass es praktisch keine Einschränkungen in Bezug auf die Git-Funktionen gibt.
Die Unterstützung für TFVC ist jedoch im Vergleich zu git-tfs begrenzt – es werden beispielsweise keine Branches unterstützt.

So hat jedes Tool seine Vor- und Nachteile. Es gibt viele Situationen, eine der beiden gegenüber der anderen zu bevorzugen.
Wir werden die prinzipielle Verwendung der beiden in diesem Buch behandeln.

[NOTE]
====
Sie benötigen Zugriff auf ein TFVC-basiertes Repository, um diesen Anweisungen zu folgen.
In der „freien Wildbahn“ sind sie nicht so zahlreich wie Git- oder Subversion-Repositorys, so dass Sie möglicherweise selbst eines erstellen müssen.
Codeplex (https://archive.codeplex.com/[]) oder Visual Studio Online (https://visualstudio.microsoft.com[]) sind beide dafür eine gute Wahl.
====


===== Erste Schritte: `git-tf`

Als Erstes werden Sie, wie bei jedem Git-Projekt, klonen.
So sieht das mit `git-tf` aus:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Das erste Argument ist die URL einer TFVC-Kollektion, das zweite folgt der Form `$/project/branch` und das dritte ist der Pfad zum lokalen Git-Repository, das erstellt werden soll (letzteres ist optional).
Git-tf kann nur mit einem einzigen Branch gleichzeitig arbeiten. Falls Sie Checkins auf einem anderen TFVC Branch durchführen wollen, müssen Sie einen neuen Clone aus diesem Branch erstellen.

Dadurch entsteht ein voll funktionsfähiges Git-Repository:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Das nennt man einen _flachen_ Klon, d.h. es wurde nur der letzte Changeset heruntergeladen.
TFVC ist nicht dafür konzipiert, dass jeder Client eine vollständige Kopie der Historie hat, so dass git-tf standardmäßig nur die neueste Version erhält, was viel schneller ist.

Wenn Sie etwas Zeit haben, lohnt es sich vermutlich, die gesamte Projekt-Historie mit der Option `--deep` zu kopieren:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

Beachten Sie die Tags mit Bezeichnungen wie `TFS_C35189`. Diese Eigenschaft hilft Ihnen zu erkennen, welche Git-Commits mit TFVC Change-Sets verknüpft sind.
Das ist eine elegante Art, diese anzuzeigen, da Sie mit einem einfachen Log-Befehl sehen können, welcher Ihrer Commits mit einem Snapshot verbunden ist, der auch in TFVC existiert.
Sie sind nicht notwendig (Sie können sie mit `git config git-tf.tag false` deaktivieren) – git-tf behält die echten Commit-Changeset-Mappings in der `.git/git-tf` Datei.


===== Erste Schritte: `git-tfs`

Das Klonen mit Git-tfs verhält sich etwas anders.
Achten Sie darauf:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

Beachten Sie das Flag `--with-branches`.
Git-tfs ist in der Lage, TFVC-Branches auf Git-Branches abzubilden, und dieses Flag sagt ihm, dass es für jeden TFVC-Branch einen lokalen Git-Branch einrichten soll.
Dieses Verfahren wird dringend empfohlen, wenn Sie jemals in TFS verzweigt oder gemergt haben, es wird aber nicht mit einem Server funktionieren, der älter als TFS 2010 ist – vor dieser Version waren „Branches“ nur Verzeichnisse, so dass git-tfs sie nicht von normalen Ordnern unterscheiden konnte.

Werfen wir einen Blick auf das entstandene Git-Repository:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Es gibt zwei lokale Branches, `master` und `featureA`, die den Anfangspunkt des Klons darstellen (`Trunk` in TFVC) und einen untergeordneten Branch (`featureA` in TFVC).
Sie können auch sehen, dass die `tfs` „remote“ auch ein paar Referenzen hat: `default` und `featureA`, die TFVC-Branches darstellen.
Git-tfs ordnet den Branch, von dem aus Sie geklont haben, `tfs/default` zu, während andere ihre eigenen Namen erhalten.

Eine weitere zu beachtende Funktion betrifft die `git-tfs-id:` Zeilen in den Commit-Beschreibungen.
Anstelle von Tags verwendet git-tfs diese Marker, um TFVC-Change-Sets mit Git-Commits zu verknüpfen.
Das hat den Effekt, dass Ihre Git-Commits einen unterschiedlichen SHA-1-Hash haben, vor und nach dem sie an TFVC übertragen wurden.

===== Der Git-tf[s] Workflow

[NOTE]
====
Unabhängig davon, welches Tool Sie verwenden, sollten Sie ein paar Git-Konfigurationswerte festlegen, um Probleme zu vermeiden.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

Als nächstes wollen Sie natürlich an dem Projekt arbeiten.
TFVC und TFS verfügen über mehrere Funktionen, die Ihren Workflow noch komplexer machen können:

. Themen-Branches, die nicht in TFVC dargestellt werden, erhöhen die Komplexität.
  Das hängt mit den *sehr* unterschiedlichen Möglichkeiten zusammen, wie TFVC und Git Branches darstellen.
. Beachten Sie, dass TFVC es Benutzern erlaubt, Dateien vom Server „auszuchecken“ und sie so zu sperren, dass niemand sonst sie bearbeiten kann.
  Das wird Sie natürlich nicht davon abhalten, sie in Ihrem lokalen Repository zu bearbeiten, aber es könnte Ihnen im Weg stehen, wenn es darum geht, Ihre Änderungen auf den TFVC-Server zu übertragen.
. TFS hat mit dem Konzept der „eingezäunten“ (engl. gated) Checkins, bei denen ein TFS-Build-Testzyklus erfolgreich abgeschlossen werden muss, bevor das Einchecken erlaubt wird.
  Dazu dient die Funktion „shelve“ in TFVC, auf die wir hier nicht näher eingehen werden.
  Sie können das mit git-tf manuell vortäuschen. Dabei stellt git-tfs den Befehl `checkintool` zur Verfügung, der eine Einzäunung (engl. gate) erkennt.

Kurz gesagt, was wir hier behandeln werden, ist der logische Weg, der die meisten dieser Probleme umgeht oder vermeidet.

===== `git-tf` Workflow:


Nehmen wir an, Sie haben einige Arbeiten erledigt, ein paar Git-Commits auf `master` gemacht und Sie sind fertig, Ihre Ergebnisse auf den TFVC-Server zu übertragen.
Das ist unser Git-Repository:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Wir wollen einen Snapshot machen, der sich im Commit `4178a82` befindet und ihn auf den TFVC-Server pushen.
Das Wichtigste zuerst: Mal sehen, ob einer unserer Teamkollegen seit unserer letzten Verbindung etwas getan hat:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Es sieht so aus, als würde auch noch jemand anderes daran arbeiten. Jetzt haben wir einen abweichenden Verlauf.
Hier glänzt Git: wir haben zwei Möglichkeiten, wie es weitergehen kann:

. Einen Merge-Commit zu machen fühlt sich als Git-Benutzer natürlich an (schließlich ist es das, was `git pull` macht) und git-tf kann das mit einem einfachen `git tf pull` für Sie tun.
  Seien Sie sich jedoch bewusst, dass TFVC nicht auf diese Weise denkt. Wenn Sie die Merge-Commits pushen, wird Ihr Verlauf auf beiden Seiten unterschiedlich aussehen, was verwirrend sein kann.
  Aber wenn Sie alle Ihre Änderungen in einem Changeset übertragen, ist das wahrscheinlich der einfachste Weg.
. Ein Rebase bewirkt, dass unsere Commit-Historie linear wird, was bedeutet, dass wir die Möglichkeit haben, jedes unserer Git-Commits in ein TFVC-Changeset zu konvertieren.
  Da dadurch die meisten Optionen offen bleiben, empfehlen wir Ihnen diese Vorgehensweise. Mit Hilfe von git-tf wird es Ihnen mit dem Befehl `git tf pull - rebase` sogar leicht gemacht.

Sie haben die Wahl.
Für dieses Beispiel werden wir ein Rebase durchführen:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Nun können wir einen „checkin“ auf den TFVC-Server durchführen.
Git-tf bietet Ihnen die Möglichkeit, ein einziges Changeset durchzuführen, das alle Veränderungen seit der letzten Änderung repräsentiert (`--shallow`, die Standardeinstellung) oder ein neues Changeset für jeden Git-Commit zu erstellen (`--deep`).
Für dieses Beispiel werden wir nur ein einziges Changeset erzeugen:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Es gibt ein neues `TFS_C35348` Tag, das anzeigt, dass TFVC genau den gleichen Snapshot speichert wie der `5a0e25e` Commit.
Wichtig zu beachten ist, dass nicht jeder Git-Commit ein genaues Gegenstück in TFVC haben muss. Der `6eb3eb5` Commit, zum Beispiel, existiert nirgendwo auf dem Server.

So sieht der wichtigste Workflow aus.
Es gibt noch ein paar andere Aspekte, die Sie im Auge behalten sollten:

* Es gibt kein Branching.
  Git-tf kann Git-Repositorys jeweils nur aus einem einzigen TFVC-Branch erstellen.
* Benutzen Sie zur Zusammenarbeit TFVC _oder_ Git, aber nicht beides.
  Unterschiedliche git-tf-Klone desselben TFVC-Repositorys können unterschiedliche Commit SHA-1-Hashes haben, was zu Kopfschmerzen ohne Ende führen wird.
* Wenn der Workflow Ihres Teams die Zusammenarbeit in Git und die regelmäßige Synchronisierung mit TFVC umfasst, verbinden Sie sich mit TFVC ausschließlich mit einem der Git-Repositories.

===== `git-tfs` Workflow:

Lassen Sie uns das dasselbe Szenario mit git-tfs durchgehen.
Hier sind die neuen Commits, die wir für den `master` Branch in unserem Git-Repository vorgenommen haben:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

Mal sehen, ob noch jemand anderes gearbeitet hat, während wir abgeschnitten waren:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Ja, es stellt sich heraus, dass ein Co-Autor ein neues TFVC Change-Set hinzugefügt hat, das als neuer `aea74a0` Commit erscheint und der `tfs/default` Remote Branch verändert wurde.

Wie bei git-tf haben wir zwei fundamentale Optionen, um diesen unterschiedlichen Verlauf aufzulösen:

. Ein Rebase, um den linearen Verlauf zu erhalten.
. Ein Merge, um zu behalten, was wirklich passiert ist.

In diesem Fall werden wir einen „deep“ checkin durchführen. Dabei wird jeder Git Commit zu einem TFVC Changeset, also sollten wir einen Rebase durchführen.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Nun sind wir soweit, unseren Beitrag zu abzuschließen, indem wir unseren Code in den TFVC-Server einchecken.
Wir werden hier den Befehl `rcheckin` verwenden, um ein TFVC Change-Set für jeden Git-Commit im Pfad von HEAD zum ersten gefundenen `tfs` Remote-Branch zu erstellen (der `checkin` Befehl würde nur einen Changeset erzeugen, ähnlich wie beim Squashen von Git-Commits).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Bitte beachten Sie, dass git-tfs nach jedem erfolgreichen checkin auf dem TFVC-Server die verbleibende Arbeit auf das zurücksetzt, was gerade getan wurde.
Das liegt daran, dass es das Feld `git-tfs-id` am Ende der Commit-Beschreibungen hinzufügt, was die SHA-1-Hashes ändert.
Das ist genau so, wie es entworfen wurde. Es gibt keinen Grund sich Sorgen zu machen, aber Sie sollten sich bewusst sein, dass es geschieht, vor allem wenn Sie Git-Commits mit anderen teilen.

TFS verfügt über viele Funktionen, die sich in sein Versionskontrollsystem integrieren lassen, wie z.B. Workitems, benannte Prüfer, Gated Checkins usw.
Es kann umständlich sein, diese Funktionen nur mit einem Kommandozeilen-Tool zu verwenden, aber glücklicherweise gibt es mit git-tfs ein grafisches Checkin-Tool, das Sie sehr einfach starten können:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Es sieht ungefähr so aus:

.Das git-tfs Checkin-Tool
image::images/git-tfs-ct.png[Das git-tfs Checkin-Tool]

Das kommt den TFS-Benutzern vertraut vor, da es sich um den gleichen Dialog handelt, der aus Visual Studio heraus gestartet wird.

Mit Git-tfs können Sie auch TFVC-Branches aus Ihrem Git-Repository steuern.
Lassen Sie uns zum Beispiel einen Branch erstellen:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Das Erstellen eines Branch in TFVC bedeutet, ein Change-Set hinzuzufügen, in dem dieser Branch bereits existiert. Dieser Branch wird als Git-Commit projiziert.
Beachten Sie auch, dass git-tfs den `tfs/featureBee` Remote-Branch *erstellt hat*, aber dass `HEAD` immer noch auf `master` zeigt.
Wenn Sie an dem neu erstellten Zweig arbeiten möchten, sollten Sie Ihre neuen Commits auf dem `1d54865` Commit basieren, möglicherweise indem Sie einen Topic Branch aus diesem Commit erstellen.

===== Git und TFS, Zusammenfassung

Git-tf und Git-tfs sind beides großartige Werkzeuge für die Verbindung zu einem TFVC-Server.
Sie ermöglichen es Ihnen, die Leistungsfähigkeit von Git lokal zu nutzen, zu vermeiden, dass Sie ständig auf den zentralen TFVC-Server zurückkehren müssen und Ihren Alltag als Entwickler viel einfacher zu gestalten, ohne Ihr gesamtes Team zur Migration nach Git zu zwingen.
Wenn Sie unter Windows arbeiten (was wahrscheinlich ist, wenn Ihr Team TFS verwendet), werden Sie vermutlich git-tfs verwenden wollen, da der Funktionsumfang vollständiger ist, aber wenn Sie auf einer anderen Plattform arbeiten, werden Sie git-tf verwenden, das etwas eingeschränkter ist.
Wie bei den meisten Tools in diesem Kapitel sollten Sie eines dieser Versionskontrollsysteme wählen, um eindeutig zu sein, und das andere in einer untergeordneten Form verwenden – entweder Git oder TFVC sollte das Zentrum der Zusammenarbeit sein, aber nicht beide.
