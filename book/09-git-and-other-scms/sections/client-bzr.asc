==== Git und Bazaar

Unter den DVCSs ist https://bazaar.canonical.com[Bazaar^] ein weiterer bedeutender Vertreter.
Bazaar ist freie Software, Open-Source und ist Teil des https://www.gnu.org[GNU-Projekts^].
Es verhält sich ganz anders als Git.
Manchmal muss man, um das Gleiche wie bei Git machen zu können, ein anderes Schlüsselwort verwenden. Einige gängige Schlüsselwörter haben nicht die gleiche Bedeutung.
Insbesondere das Branch-Management ist sehr verschieden und kann zu Verwirrung und Missverständnissen führen, vor allem, wenn jemand aus dem Umfeld von Git kommt.
Dennoch ist es von Git aus möglich, an einem Bazaar-Repository zu arbeiten.

Es gibt viele Projekte, die es Ihnen ermöglichen, Git als Bazaar-Client zu nutzen.
Hier werden wir das Projekt von Felipe Contreras verwenden, das Sie unter https://github.com/felipec/git-remote-bzr[^] finden können.
Um es zu installieren, müssen Sie nur die Datei git-remote-bzr in einen Ordner herunterladen, der sich in Ihrem Pfad (`$PATH`) befindet:

[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Außerdem müssen Sie Bazaar installiert haben.
Das ist alles!

===== Erstellen eines Git-Repository aus einem Bazaar-Repository

Die Bedienung ist einfach.
Es genügt, ein Bazaar-Repository zu klonen, dem `bzr::` vorangestellt ist.
Da Git und Bazaar beide Vollklone auf Ihrem Computer erstellen, ist es möglich, einen Git-Klon an Ihren lokalen Bazaar-Klon anzuhängen, es wird aber nicht empfohlen.
Es ist viel einfacher, Ihren Git-Klon direkt an den gleichen Ort zu hängen, an dem Ihr Bazaar-Klon hängt – das zentrale Repository.

Angenommen, Sie haben mit einem Remote-Repository gearbeitet, das sich unter der Adresse `bzr+ssh://developer@mybazaarserver:myproject` befindet.
Dann müssen Sie es wie folgt klonen:

[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

An diesem Punkt wird Ihr Git-Repository erstellt, aber es ist nicht für eine optimale Festplattennutzung komprimiert.
Deshalb sollten Sie auch Ihr Git-Repository bereinigen und komprimieren, vor allem wenn es ein großes ist:

[source,console]
----
$ git gc --aggressive
----

===== Bazaar Branches

Bazaar erlaubt es Ihnen nur, Branches zu klonen, aber ein Repository kann mehrere Branches enthalten, und `git-remote-bzr` kann beides klonen.
Um zum Beispiel einen Branch zu klonen:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

Und um das gesamte Repository zu klonen:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

Der zweite Befehl klont alle Branches, die im emacs-Repository enthalten sind; es ist jedoch möglich einige Branches hervorzuheben:

[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Einige Remote-Repositorys erlauben es Ihnen nicht, ihre Branches aufzulisten, in diesem Fall müssen Sie sie manuell angeben, und obwohl Sie die Konfiguration im Klon-Befehl angeben könnten, könnten Sie das leichter feststellen:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Ignorieren, was mit .bzrignore ignoriert wird

Da Sie an einem mit Bazaar verwalteten Projekt arbeiten, sollten Sie keine `.gitignore` Datei erstellen, da Sie diese versehentlich unter Versionskontrolle setzen _könnten_ und die anderen mit Bazaar arbeitenden Benutzer dadurch gestört würden.
Die Lösung besteht darin, die `.git/info/exclude` Datei entweder als symbolischen Link oder als normale Datei zu erstellen.
Wir werden später sehen, wie wir dieses Problem lösen können.

Bazaar verwendet das gleiche Modell wie Git, um Dateien zu ignorieren, hat aber auch zwei Funktionen, die kein Äquivalent in Git haben.
Die vollständige Beschreibung finden Sie in der http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[Dokumentation^].
Die beiden Merkmale sind:

1. „!!“ ermöglicht es Ihnen, bestimmte Dateimuster zu ignorieren, auch wenn sie mit einer „!“-Regel angegeben werden.
2. „RE:“ am Anfang einer Zeile erlaubt es Ihnen, einen https://docs.python.org/3/library/re.html[regulären Python-Ausdruck^] anzugeben (Git erlaubt nur Shell Globs).

Folglich sind zwei verschiedene Situationen zu prüfen:

1. Wenn die Datei `.bzrignore` keines dieser beiden spezifischen Präfixe enthält, dann können Sie einfach einen symbolischen Link darauf im Repository setzen: `ln -s.bzrignore.git/info/exclude`.
2. Ansonsten müssen Sie die Datei `.git/info/exclude` erstellen und anpassen, um genau die gleichen Dateien in `.bzrignore` zu ignorieren.

Was auch immer der Fall ist, Sie müssen auf jede Änderung von `.bzrignore` achten, um sicherzustellen, dass die Datei `.git/info/exclude` immer `.bzrignore` widerspiegelt.
Wenn sich die Datei `.bzrignore` ändert und eine oder mehrere Zeilen enthält, die mit „!!“ oder „RE:“ beginnen, muss die Datei `.git/info/exclude` so angepasst werden, dass sie die gleichen Dateien ignoriert, wie die, die mit `.bzrignore` ignoriert werden.
Wenn die Datei `.git/info/exclude` ein symbolischer Link war, müssen Sie außerdem zuerst den symbolischen Link löschen, `.bzrignore` nach `.git/info/exclude` kopieren und diese dann anpassen.
Seien Sie jedoch vorsichtig bei der Erstellung, da es mit Git unmöglich ist, eine Datei wieder einzubinden, wenn ein übergeordnetes Verzeichnis dieser Datei ausgeschlossen ist.

===== Fetchen der Änderungen aus dem Remote-Repository

Um die Änderungen des Remote zu fetchen, pullen Sie die Änderungen wie gewohnt mit Hilfe von Git-Befehlen.
Angenommen, Ihre Änderungen befinden sich im `master` Branch, mergen oder rebasieren Sie Ihre Arbeit auf den `origin/master` Branch:

[source,console]
----
$ git pull --rebase origin
----

===== Ihre Arbeit zum Remote-Repository pushen

In Basaar ist das Konzept der Merge-Commits ebenfalls vorhanden, so dass es kein Problem geben wird, wenn Sie einen Merge Commit pushen.
So können Sie an einem Branch arbeiten, Änderungen in `master` zusammenführen und Ihre Arbeit pushen.
Dann erstellen Sie Ihre Branches, testen und committen Ihre Arbeit wie gewohnt.
Schließlich pushen Sie Ihre Arbeit in das Bazaar-Repository:

[source,console]
----
$ git push origin master
----

===== Vorbehalte/Einschränkungen

Das Remote-Helfer-Framework von Git hat einige gültige Beschränkungen.
Vor allem funktionieren diese Befehle nicht:

* git push origin :branch-to-delete (Bazaar kann auf diese Weise keine Referenzen löschen)
* git push origin old:new (es wird `old` pushen)
* git push --dry-run origin branch (es wird pushen)

===== Zusammenfassung

Die Modelle von Git und Bazaar sind sehr ähnlich, so dass es beim Arbeiten über die Grenzen keinen großen Aufwand erfordert.
Solange Sie auf die Einschränkungen achten und sich immer bewusst sind, dass das Remote-Repository nicht nativ Git ist, werden Sie damit umgehen können.
