==== Subversion

(((Subversion)))
(((Importieren, aus Subversion)))
Wenn Du den vorherigen Abschnitt über die Verwendung von `git svn` gelesen hast, kannst du die Anweisungen zu `git svn clone` dazu benutzen, um ein Repository zu klonen. Anschliessend benötigst du den Subversion-Servers nicht mehr. Pushe alles zu einem neuen Git-Server und nutze dann nur noch diesen.
Der Verlauf kann dabei aus dem Subversion-Server gezogen werden, was einige Zeit in Anspruch nehmen kann – abhängig von der Geschwindigkeit, mit der dein SVN-Server die Historie ausliefern kann.

Allerdings ist der Import nicht perfekt. Da er aber so lange dauert, kannst du es auch direkt richtig machen.
Das erste Problem sind die Autoreninformationen.
In Subversion hat jede Person, die einen Commit durchführt, auch einen Benutzer-Account auf dem System, der in den Commit-Informationen erfasst wird.
Die Beispiele im vorherigen Abschnitt zeigen an einigen Stellen `schacon`, wie z.B. der `blame` Output und das `git svn log`.
Wenn du diese auf bessere Git-Autorendaten abbilden möchtest, benötigst du eine Zuordnung der Subversion-Benutzer zu den Git-Autoren.
Erstelle eine Datei mit Namen `users.txt`, die diese Zuordnung in folgendem Format vornimmt:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Um eine Liste der Autorennamen zu erhalten, die SVN verwendet, kannst du diesen Befehl ausführen:

[source,console]
----
$ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Das erzeugt die Protokollausgabe im XML-Format, behält nur die Zeilen mit Autoreninformationen, verwirft Duplikate und entfernt die XML-Tags.
Natürlich funktioniert das nur auf einem Computer, auf dem `grep`, `sort` und `perl` installiert sind.
Leite diese Ausgabe dann in deine `users.txt` Datei um, damit du die entsprechenden Git-Benutzerdaten neben jedem Eintrag hinzufügen kannst.

[NOTE]
====
Wenn du dies auf einem Windows-Computer versuchen solltest, treten an dieser Stelle Probleme auf.
Microsoft hat unter https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git[^] einige gute Ratschläge und Beispiele bereitgestellt.
====

Du kannst diese Datei an `git svn` übergeben, um die Autorendaten genauer abzubilden.
Außerdem kannst du `git svn` anweisen, die Metadaten, die Subversion normalerweise importiert, nicht zu berücksichtigen. Übergebe dazu `--no-metadata` an den `clone` oder `init` Befehl.
Die Metadaten enthalten eine `git-svn-id` in jeder Commit-Nachricht, die Git während des Imports generiert.
Dies kann dein Git-Log aufblähen und es möglicherweise etwas unübersichtlich machen.

[NOTE]
====
Du musst die Metadaten beibehalten, wenn du im Git-Repository vorgenommene Commits wieder in das ursprüngliche SVN-Repository spiegeln möchtest.
Wenn du die Synchronisierung nicht in deinem Commit-Protokoll haben möchtest, kannst du den Parameter `--no-metadata` weglassen.
====

Dadurch sieht dein `import` Befehl so aus:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix "" -s my_project
$ cd my_project
----

Nun solltest du einen passenderen Subversion-Import in deinem `my_project` Verzeichnis haben.
Anstelle von Commits, die so aussehen:

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

sehen diese jetzt so aus:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Nicht nur das Autorenfeld sieht viel besser aus, auch die `git-svn-id` ist nicht mehr vorhanden.

Du solltest auch eine Bereinigung nach dem Import durchführen.
Zum einen solltest du die seltsamen Referenzen bereinigen, die `git svn` eingerichtet hat.
Verschiebe zuerst die Tags so, dass sie echte Tags und nicht merkwürdige Remote-Branches darstellen. Dann verschiebe den Rest der Branches auf lokale Branches.

Damit die Tags zu richtigen Git-Tags werden, führe folgenden Befehl aus:

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Dabei werden die Referenzen, die Remote-Branches waren und mit `refs/remotes/tags/` begonnen haben zu richtigen (leichten) Tags gemacht.

Als nächstes verschiebe den Rest der Referenzen unter `refs/remotes` in lokale Branches:

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Es kann vorkommen, dass du einige zusätzliche Branches siehst, die durch `@xxx` ergänzt sind (wobei xxx eine Zahl ist), während du in Subversion nur einen Branch siehst.
Es handelt sich hierbei um eine Subversion-Funktion mit der Bezeichnung „peg-revisions“, für die Git kein syntaktisches Gegenstück hat.
Daher fügt `git svn` einfach die SVN-Versionsnummer zum Branch-Namen hinzu, genau so, wie du es in SVN geschrieben hättest, um die peg-Revision dieses Branchs anzusprechen.
Wenn du dich nicht mehr um die peg-Revisionen sorgen willst, entferne diese einfach:

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

Jetzt sind alle alten Branches echte Git-Branches und alle alten Tags sind echte Git-Tags.

Da wäre noch eine letzte Sache zu klären.
Leider erstellt `git svn` einen zusätzlichen Branch mit dem Namen `trunk`, der auf den Standard-Branch von Subversion gemappt wird, aber die `trunk` Referenz zeigt auf die gleiche Position wie `master`.
Da `master` in Git eher idiomatisch ist, hier die Anleitung zum Entfernen des extra Branchs:

[source,console]
----
$ git branch -d trunk
----

Das Letzte, was du tun musst, ist deinem neuen Git-Server als Remote hinzuzufügen und zu ihm zu pushen.
Hier ist ein Beispiel für das hinzufügen deines Servers als Remote:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Um alle deine Branches und Tags zu aktualisieren, kannst du jetzt diese Anweisungen ausführen:

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Alle deine Branches und Tags sollten sich nun auf deinem neuen Git-Server in einem schönen, sauberen Import befinden.
