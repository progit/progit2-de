==== Bazaar
(((Bazaar)))(((Importieren, aus Bazaar)))

Bazaar ist ein DVCS-Tool ähnlich wie Git. Deshalb ist es relativ unkompliziert, ein Bazaar-Repository in ein Git-Repository zu konvertieren.
Um dieses Ziel zu erreichen, müssen Sie das `bzr-fastimport` Plugin einlesen.

===== Das bzr-fastimport Plugin herunterladen

The procedure for installing the fastimport plugin is different on UNIX-like operating systems and on Windows.
In the first case, the simplest is to install the `bzr-fastimport` package that will install all the required dependencies.

Zum Beispiel, mit Debian (und seinen Derivaten), würden Sie folgendes tun:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

Mit RHEL würden Sie folgendes tun:

[source,console]
----
$ sudo yum install bzr-fastimport
----

Bei Fedora, seit Release 22, heißt der neue Paketmanager dnf:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Falls kein Packet verfügbar ist, können Sie es als Plugin installieren:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins     # creates the necessary folders for the plugins
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport   # imports the fastimport plugin
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # installs the plugin
----

Damit dieses Plugin funktioniert, benötigen Sie auch das `fastimport` Python-Modul.
Sie können überprüfen, ob es vorhanden ist oder nicht und es dann mit den folgenden Befehlen installieren:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----

Wenn es nicht vorhanden ist, können Sie es unter der Adresse https://pypi.python.org/pypi/fastimport/[^] herunterladen.

Im zweiten Fall (unter Windows) wird `bzr-fastimport` automatisch mit der Standalone-Version und der Default-Installation auf Ihrem Computer mit installiert (alle Kontrollkästchen aktiviert lassen).
Deshalb haben Sie in diesem Fall nichts weiter zu tun.

An dieser Stelle unterscheidet sich die Vorgehensweise beim Import eines Bazaar-Repositorys dahingehend, ob Sie einen einzelnen Branch haben oder mit einem Repository arbeiten, das mehrere Branches hat.

===== Projekt mit einer einzigen Branch

Wechseln Sie jetzt mit `cd` in das Verzeichnis, das Ihr Bazaar-Repository enthält, und initialisieren Sie das Git-Repository:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

Nun können Sie Ihr Bazaar-Repository einfach exportieren und mit dem folgenden Befehl in ein Git-Repository konvertieren:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Abhängig von der Größe des Projekts wird Ihr Git-Repository in einer Zeitspanne von wenigen Sekunden bis einigen Minuten erstellt.

===== Projekt mit einem Hauptbranch und einem Arbeitsbranch

Sie können auch ein Bazaar-Repository importieren, das Branches enthält.
Angenommen, Sie haben zwei Branches: Einer repräsentiert den Hauptzweig (myProject.trunk), der andere ist der Arbeitszweig (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Erstellen Sie das Git-Repository und wechseln Sie jetzt mit `cd` in dieses:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Den `master` Branch zu Git pullen:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Den Arbeits-Branch zu Git pullen:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Jetzt zeigt Ihnen `git branch` sowohl den `master` Branch als auch den `work` Branch.
Überprüfen Sie die Protokolle, um sicherzustellen, dass sie vollständig sind, und entfernen Sie die Dateien `marks.bzr` und `marks.git`.

===== Die Staging-Area synchronisieren

Unabhängig von der Anzahl der Branches und der verwendeten Importmethode ist Ihre Staging-Area nicht mit `HEAD` synchronisiert, und beim Import mehrerer Branches ist auch Ihr Arbeitsverzeichnis nicht synchronisiert.
Diese Situation lässt sich mit dem folgenden Befehl leicht lösen:

[source,console]
----
$ git reset --hard HEAD
----

===== Mit .bzrignore ignorierte Dateien auslassen

Werfen wir nun einen Blick auf die zu ignorierenden Dateien.
Zuerst müssen Sie `.bzrignore` in `.gitignore` umbenennen.
Wenn die Datei `.bzrignore` eine oder mehrere Zeilen enthält, die mit „!!“ oder „RE:“ beginnen, müssen Sie sie ändern und vielleicht mehrere `.gitignore` Dateien anlegen, um genau die gleichen Dateien zu ignorieren, die Bazaar ignoriert hat.

Schließlich ist ein Commit zu erstellen, der diese Änderung für die Migration enthält:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Ihr Repository an den Server übertragen

Hier wären wir!
Jetzt können Sie das Repository auf seinen neuen Zielserver pushen:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Ihr Git-Repository ist einsatzbereit.
