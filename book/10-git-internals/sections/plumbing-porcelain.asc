[[_plumbing_porcelain]]
=== Basiskommandos und Hauptbefehle (Plumbing and Porcelain)

In diesem Buch wird in erster Linie beschrieben, wie Git mit etwa 30 Unterbefehlen wie `checkout`, `branch`, `remote` usw. verwendet wird.
Git war ursprünglich ein Werkzeug für ein Versionskontrollsystem und kein benutzerfreundliches VCS. Somit verfügt es über eine Reihe von Unterbefehlen, die auf niedriger Ebene ausgeführt werden und so konzipiert sind, dass sie im UNIX-Stil verkettet oder über Skripte aufgerufen werden können.
Diese Befehle werden im Allgemeinen als Basiskommandos von Git bezeichnet, während die benutzerfreundlicheren Befehle als Hauptbefehle bezeichnet werden.

As you will have noticed by now, this book's first nine chapters deal almost exclusively with porcelain commands.
But in this chapter, you'll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git, and help demonstrate how and why Git does what it does.
Many of these commands aren't meant to be used manually on the command line, but rather to be used as building blocks for new tools and custom scripts.

When you run `git init` in a new or existing directory, Git creates the `.git` directory, which is where almost everything that Git stores and manipulates is located.
If you want to back up or clone your repository, copying this single directory elsewhere gives you nearly everything you need.
This entire chapter basically deals with what you can see in this directory.
Here's what a newly-initialized `.git` directory typically looks like:

[source,console]
----
$ ls -F1
config
description
HEAD
hooks/
info/
objects/
refs/
----

Depending on your version of Git, you may see some additional content there, but this is a fresh `git init` repository -- it's what you see by default.
The `description` file is used only by the GitWeb program, so don't worry about it.
The `config` file contains your project-specific configuration options, and the `info` directory keeps a global exclude file (((excludes))) for ignored patterns that you don't want to track in a `.gitignore` file.
The `hooks` directory contains your client- or server-side hook scripts, which are discussed in detail in <<ch08-customizing-git#_git_hooks>>.

This leaves four important entries: the `HEAD` and (yet to be created) `index` files, and the `objects` and `refs` directories.
These are the core parts of Git.
The `objects` directory stores all the content for your database, the `refs` directory stores pointers into commit objects in that data (branches, tags, remotes and more), the `HEAD` file points to the branch you currently have checked out, and the `index` file is where Git stores your staging area information.
You'll now look at each of these sections in detail to see how Git operates.
