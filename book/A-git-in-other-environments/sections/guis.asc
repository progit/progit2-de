=== Grafische Schnittstellen

(((GUIs)))(((Graphische Tools)))
Die native Umgebung von Git ist das Terminal.
Dort werden zuerst neue Funktionen implementiert, und nur über die Befehlszeile steht Ihnen die volle Leistung von Git zur Verfügung.
Die Befehlszeile ist jedoch nicht für alle Aufgaben die beste Wahl. Manchmal benötigen Sie eine visuelle Darstellung, und einige Benutzer sind mit einer grafischen -Oberfläche viel besser vertraut.

Es ist wichtig zu beachten, dass unterschiedliche Schnittstellen auf unterschiedliche Workflows zugeschnitten sind.
Einige Clients stellen nur eine sorgfältig zusammengestellte Teilmenge der Git-Funktionalität zur Verfügung, um eine bestimmte Arbeitsweise zu unterstützen, die der Autor für effektiv hält.
Mit diesem Hintergrund kann keines dieser Tools als „besser“ bezeichnet werden als die anderen, sie sind einfach besser für den beabsichtigten Zweck geeignet.
Beachten Sie auch, dass diese grafischen Clients nichts tun können, was der Befehlszeilenclient nicht kann. In der Befehlszeile haben Sie immer noch die größte Leistung und Kontrolle, wenn Sie mit Ihren Repositorys arbeiten.

==== `gitk` und `git-gui`

(((Git Befehle, gitk)))(((Git Befehle, gui)))(((gitk)))
Wenn Sie Git installieren, erhalten Sie auch die visuellen Tools `gitk` und `git-gui`.

`gitk` ist ein grafischer Verlaufsbetrachter.
Stellen Sie sich das wie eine leistungsstarke GUI-Shell über `git log` und `git grep` vor.
Dies ist das Tool, welches sie nutzen sollten, wenn sie versuchen, etwas zu finden, das in der Vergangenheit passiert ist oder wenn sie den Verlauf Ihres Projekts visualisieren wollen.

Gitk lässt sich am einfachsten über die Befehlszeile aufrufen.
Geben Sie einfach eine CD in ein Git-Repository ein und geben Sie Folgendes ein:

[source,console]
----
$ gitk [git log options]
----

Gitk akzeptiert viele Befehlszeilenoptionen, von denen die meisten an die zugrunde liegende Aktion `git Log` übergeben werden.
Wahrscheinlich eines der nützlichsten ist das `--all` Flag, das gitk anweist, Commits anzuzeigen, die von jedem Ref erreichbar sind, nicht nur von HEAD.
Die Benutzeroberfläche von Gitk sieht folgendermaßen aus:

.Der `gitk` Verlaufsbetrachter
image::images/gitk.png[Der `gitk` Verlaufsbetrachter]

Im oberen Teil sieht man etwas, das ein bisschen wie die Ausgabe von `git log --graph` aussieht. Jeder Punkt steht für ein Commit, die Linien für übergeordnete Beziehungen und Refs werden als farbige Kästchen angezeigt.
Der gelbe Punkt steht für HEAD und der rote Punkt für Änderungen, die noch nicht festgeschrieben wurden.
Unten sehen Sie eine Ansicht des ausgewählten Commits. Die Kommentare und Patches auf der linken Seite und eine zusammenfassende Ansicht auf der rechten Seite.
Dazwischen befindet sich eine Sammlung von Steuerelementen, die zum Durchsuchen des Verlaufs verwendet werden können.

`git-gui` hingegen ist in erster Linie ein Werkzeug zum Erstellen von Commits.
Es kann ebenfalls sehr einfach über die Befehlszeile aufgerufen werden:

[source,console]
----
$ git gui
----

Es sieht in etwa so aus:

.Das `git-gui` Commit-Tool
image::images/git-gui.png[Das `git-gui` Commit-Tool]

Links ist der Index. „Unstage“ Änderungen befinden sich oben, „staged“ Änderungen unten.
Sie können ganze Dateien zwischen den beiden Status verschieben, indem Sie auf deren Symbole klicken. Weiterhin können Sie eine Datei zum Anzeigen auswählen, indem Sie auf ihren Namen klicken.

Oben rechts befindet sich die Diff-Ansicht, in der die Änderungen für die aktuell ausgewählte Datei angezeigt werden.
Sie können einzelne Bereiche (oder einzelne Linien) stagen, indem Sie mit der rechten Maustaste in diesen Bereich klicken.

Unten rechts befindet sich der Nachrichten- und Aktionsbereich.
Geben Sie Ihre Nachricht in das Textfeld ein und klicken Sie auf „Commit“, um etwas Ähnliches wie `git commit` zu tun.
Sie können das letzte Commit auch ändern, indem Sie das Optionsfeld „Ändern“ aktivieren, um den Bereich „Staged Changes“ mit dem Inhalt des letzten Commits zu aktualisieren.
Anschließend können Sie einfach einige Änderungen aktivieren oder deaktivieren, die Commit-Nachricht ändern und erneut auf „Commit“ klicken, um den alte commit durch einen neuen zu ersetzen.

`gitk` und `git-gui` sind Beispiele für aufgabenorientierte Tools.
Jedes von ihnen ist auf einen bestimmten Zweck zugeschnitten (Anzeigen des Verlaufs bzw. Erstellen von Commits) und lässt die für diese Aufgabe nicht erforderlichen Funktionen aus.

==== GitHub für macOS und Windows

(((GitHub für macOS)))(((GitHub für Windows)))
GitHub hat zwei Workflow-orientierte Git-Clients erstellt: einen für Windows und einen für macOS.
Diese Clients sind ein gutes Beispiel für Workflow-orientierte Tools. Anstatt alle Funktionen von Git zu implementieren, konzentrieren sie sich stattdessen auf eine Reihe häufig verwendeter Funktionen, die gut zusammenarbeiten.
Sie sehen so aus:

.GitHub für macOS
image::images/github_mac.png[GitHub für macOS]

.GitHub für Windows
image::images/github_win.png[GitHub für Windows]

Sie sind so konzipiert, dass sie sehr ähnlich aussehen und funktionieren. Daher werden wir sie in diesem Kapitel wie ein einziges Produkt behandeln.
Wir werden keinen detaillierten Überblick über diese Tools geben (sie haben ihre eigene Dokumentation), aber kurz auf die Ansicht „Änderungen“ (in der Sie die meiste Zeit verbringen werden) werden wir eingehen.

* Auf der linken Seite befindet sich die Liste der Repositorys, die der Client verfolgt. Sie können ein Repository hinzufügen (entweder durch Klonen oder lokales Anhängen), indem Sie oben in diesem Bereich auf das Symbol "+" klicken.
* In der Mitte befindet sich ein Commit-Eingabebereich, in den Sie eine Commit-Nachricht eingeben und auswählen können, welche Dateien enthalten sein sollen.
   Unter Windows wird die Commit-Historie direkt darunter angezeigt. Unter macOS befindet sie sich auf einer separaten Registerkarte.
* Auf der rechten Seite befindet sich eine Diff-Ansicht, die zeigt, was in Ihrem Arbeitsverzeichnis geändert wurde oder welche Änderungen im ausgewählten Commit enthalten waren.
* Zu guter Letzt gibt es oben rechts die Schaltfläche „Synchronisieren“. Hierrüber werden sie primär über das Netzwerk interagieren.

[NOTE]
====
Sie benötigen kein GitHub-Konto, um diese Tools verwenden zu können.
Das Tool is designed, um Githubs Services und deren empfohlenen Workflow zu nuten, sie können damit jedoch problemlos mit jedem Repository arbeiten und Netzwerkoperationen mit jedem Git-Host ausführen.
====

===== Installation

GitHub für Windows kann von https://windows.github.com[] und GitHub für macOS von https://mac.github.com[] heruntergeladen werden.
Wenn die Anwendungen zum ersten Mal ausgeführt werden, werden Sie durch alle erstmaligen Git-Einstellungen geführt, z. B. durch die Konfiguration Ihres Namens und Ihrer E-Mail-Adresse. Beide richten vernünftige Standardeinstellungen für viele gängige Konfigurationsoptionen ein, z. B. Caches für Anmeldeinformationen und CRLF-Verhalten.

Beides sind „Evergreen“-Programme – Alle Updates werden automatisch heruntergeladen und im Hintergrund installiert, sobald die Anwendungen geöffnet sind.
Dies beinhaltet eine gebündelte Version von Git, was bedeutet, dass Sie sich wahrscheinlich nicht darum kümmern müssen, sie manuell erneut zu aktualisieren.
Unter Windows enthält der Client eine Verknüpfung zum Starten von PowerShell mit Posh-git, auf die wir später in diesem Kapitel näher eingehen werden.

Der nächste Schritt besteht darin, dem Tool einige Repositorys zur Verfügung zu stellen, mit denen es arbeiten kann.
Der Client zeigt Ihnen eine Liste der Repositorys, auf die Sie auf GitHub zugreifen können, und kann sie in einem Schritt klonen.
Wenn Sie bereits über ein lokales Repository verfügen, ziehen Sie dessen Verzeichnis einfach aus dem Finder oder Windows Explorer in das GitHub-Clientfenster. Es wird dann in die Liste der Repositorys auf der linken Seite aufgenommen.

===== Empfohlener Workflow

Sobald es installiert und konfiguriert ist, können Sie den GitHub-Client für viele gängige Git-Aufgaben verwenden.
Der beabsichtigte Workflow für dieses Tool wird manchmal als „GitHub Flow“ bezeichnet.
Wir behandeln dies ausführlicher in <<ch06-github#ch06-github_flow>>, aber der Kern des Ganzen ist, dass (a) Sie sich auf einen Branch festlegen und (b) sich mit einer remote Repository regelmäßig synchronisieren.

Das Branchmanagement ist einer der Bereiche, in denen sich die beiden Tools unterscheiden.
Unter macOS gibt es oben im Fenster eine Schaltfläche zum Erstellen eines neuen Branches:

.„Create Branch“ Knopf auf macOS
image::images/branch_widget_mac.png[„Create Branch“ Knopf auf macOS]

Unter Windows wird dazu der Name des neuen Branches in das Branchwechsel-Widget eingegeben:

.Einen Branch auf Windows erstellen
image::images/branch_widget_win.png[Einen Branch auf Windows erstellen]

Sobald Ihre Branch erstellt ist, ist das Erstellen neuer Commits ziemlich einfach.
Nehmen Sie einige Änderungen in Ihrem Arbeitsverzeichnis vor. Wenn Sie zum GitHub-Client-Fenster wechseln, wird angezeigt, welche Dateien geändert wurden.
Geben Sie eine Commitnachricht ein, wählen Sie die Dateien aus, die Sie einschließen möchten, und klicken Sie auf die Schaltfläche „Commit“ (Strg-Eingabe oder ⌘-Eingabe).

Die Hauptmethode für die Interaktion mit anderen Repositorys über das Netzwerk ist die Funktion „Synchronisieren“.
Git verfügt intern über separate Vorgänge zum Verschieben, Abrufen, Zusammenführen und Rebasen. Die GitHub-Clients reduzieren jedoch alle diese Vorgänge zu einer mehrstufigen Funktion.
Folgendes passiert, wenn Sie auf die Schaltfläche „Synchronisieren“ klicken:

. `git pull --rebase`.
  Wenn das wegen eines merge Konfliktes fehlschlägt, gehe zurück zu `git pull --no-rebase`.
. `git push`.

Dies ist die häufigste Folge von Netzwerkbefehlen, wenn Sie auf diese Art arbeiten. Wenn Sie sie also zu einem Befehl zusammenfassen, sparen Sie viel Zeit.

===== Zusammenfassung

Diese Tools eignen sich sehr gut für den Workflow, für den sie entwickelt wurden.
Entwickler und Nichtentwickler können innerhalb von Minuten an einem Projekt zusammenarbeiten, und viele der Best Practices für diese Art von Workflow sind in die Tools integriert.
Wenn Ihr Workflow jedoch anders ist oder Sie mehr Kontrolle darüber haben möchten, wie und wann Netzwerkvorgänge ausgeführt werden, empfehlen wir Ihnen, einen anderen Client oder die Befehlszeile zu verwenden.


==== Andere GUIs

Es gibt eine Reihe anderer grafischer Git-Clients, die von spezialisierten Einzweck-Tools bis hin zu Apps reichen, die versuchen, alles zu beinhalten, was Git kann.
Die offizielle Git-Website enthält eine kuratierte Liste der beliebtesten Clients unter https://git-scm.com/downloads/guis[].
Eine umfassendere Liste finden Sie auf der Git-Wiki-Website unter https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
