[[_branch_management]]
=== Branch-Management

(((Branches, verwalten)))
Nachdem Sie nun einige Branches erzeugt, zusammengeführt und gelöscht haben, lassen Sie uns jetzt einige Werkzeuge für das Branch-Management betrachten, die sich als sehr nützlich erweisen werden, wenn Sie erst einmal ständig Branches benutzen.

Der Befehl `git branch` kann noch mehr, als Branches zu erzeugen und zu löschen.(((Git Befehle, branch)))
Wenn Sie die Anweisung ohne Argumente ausführen, bekommen Sie eine einfache Auflistung Ihrer aktuellen Branches:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Beachten Sie das Sternchen (`*`), das dem Branch `master` vorangestellt ist: es zeigt an, welchen Branch Sie gegenwärtig ausgecheckt haben (bzw. den Branch, auf den `HEAD` zeigt).
Wenn Sie zu diesem Zeitpunkt einen Commit durchführen, wird der Branch `master` durch Ihre neue Änderung vorwärts bewegt.
Um sich den letzten Commit auf jedem Branch anzeigen zu lassen, können Sie die Anweisung `git branch -v` ausführen:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

Die nützlichen Optionen `--merged` und `--no-merged` können diese Liste nach Branches filtern, welche bereits mit dem Branch, auf dem Sie sich gegenwärtig befinden, zusammengeführt wurden und welche nicht.
Um zu sehen, welche Branches schon mit dem Branch zusammengeführt wurden, auf dem Sie gerade sind, können Sie die Anweisung `git branch --merged` ausführen:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Da Sie den Branch `iss53` schon früher gemergt haben, sehen Sie ihn in Ihrer Liste.
Branches auf dieser Liste ohne vorangestelltes `*` können für gewöhnlich einfach mit der Anweisung `git branch -d` gelöscht werden; Sie haben deren Änderungen bereits zu einem anderen Branch hinzugefügt, sodass Sie nichts verlieren würden.

Um alle Branches zu sehen, welche Änderungen enthalten, die Sie noch nicht integriert haben, können Sie die Anweisung `git branch --no-merged` ausführen:

[source,console]
----
$ git branch --no-merged
  testing
----

Das zeigt Ihnen einen anderen Branch.
Da er Änderungen enthält, die noch nicht integriert wurden, würde der Versuch, ihn mit `git branch -d` zu löschen, fehlschlagen:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

Wenn Sie den Branch wirklich löschen und diese Bearbeitungen aufgeben wollen, können Sie dies mit der Option `-D` erzwingen, wie die hilfreiche Meldung darauf hinweist.

[TIP]
====
Wenn Sie keinen Commit- oder Branch-Namen als Argument angeben, zeigen Ihnen die oben beschriebenen Optionen `--merged` und `--no-merged` was jeweils in Ihren _current_-Branch gemergt oder nicht gemergt wurde.

Sie können immer ein zusätzliches Argument angeben, um nach dem Merge-Status in Bezug auf einen anderen Zweig zu fragen, ohne zu diesen anderen Zweig zuerst wechseln zu müssen. So wie im Beispiel unten: „Was ist nicht in den Branch `master` integriert?“

[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====

==== Ändern eines Branchnamens

[CAUTION]
====
Sie sollten keine Branches umbenennen, die noch von anderen Beteiligten verwendet werden.
Benennen Sie einen Branch wie master/main/mainline nicht um, ohne den Abschnitt „Umbenennen des Branchnamens master“ gelesen zu haben.
====

Angenommen, Sie haben einen Branch mit dem Namen _bad-branch-name_ und Sie möchten ihn in _corrected-branch-name_ ändern, dabei aber den gesamten Verlauf erhalten.
Sie möchten auch den Branchnamen auf dem Remote-Server (GitHub, GitLab, anderer Server) ändern.
Wie machen Sie das?

Benennen Sie den Branch lokal mit dem Befehl `git branch --move` um:

[source, console]
----
$ git branch --move bad-branch-name corrected-branch-name
----

Dadurch wird Ihr falscher Branchname durch den korrigierten Branchnamen ersetzt, aber diese Änderung ist vorerst nur lokal.
Damit andere den korrigierten Branch auf der Remote-Seite sehen können, muss er gepusht werden:

[source,console]
----
$ git push --set-upstream origin corrected-branch-name
----

Nun werden wir uns kurz ansehen, wo wir uns jetzt befinden:

[source, console]
----
$ git branch --all
* corrected-branch-name
  main
  remotes/origin/bad-branch-name
  remotes/origin/corrected-branch-name
  remotes/origin/main
----

Beachten Sie, dass Sie sich auf dem Branch mit dem korrigierten Branchnamen befinden.
Der korrigierte Branch ist auf dem Remote vorhanden.
Der alte Branch ist aber auch noch auf dem Remote vorhanden.
Sie können den alten Branch auf dem Remote löschen:

[source,console]
----
$ git push origin --delete bad-branch-name
----

Jetzt ist der alte Branchname vollständig durch den korrigierten Branchnamen ersetzt.

===== Umbenennen des Branchnamens „master“

[WARNING]
====
Das Ändern des Namens eines Branches wie master/main/mainline/default wird die Integrationen, Dienste, Hilfsprogramme und Build/Release-Skripte, die Ihr Repository verwendet, beschädigen.
Bevor Sie dies tun, sollten Sie sich unbedingt mit Ihren Mithelfern beraten.
Vergewissern Sie sich auch, dass Sie Ihr Repository gründlich durchsuchen und alle Verweise auf den alten Branchnamen in Ihrem Code oder Ihren Skripten aktualisieren.
====

Geben Sie Ihrem lokalen _master_ Branch mit dem folgenden Befehl den Namen _main_:

[source,console]
----
$ git branch --move master main
----

Es gibt jetzt keinen lokalen _master_ Branch mehr, da er in _main_ umbenannt wurde.

Damit andere den neuen _main_ Branch auch wirklich sehen können, müssen Sie ihn auf den Remote-Server pushen.
Dadurch wird der umbenannte Branch auf dem Remote-Rechner verfügbar.

[source,console]
----
$ git push --set-upstream origin main
----

Nun kommen wir zu folgendem Ergebnis:

[source,console]
----
git branch --all
* main
  remotes/origin/HEAD -> origin/master
  remotes/origin/main
  remotes/origin/master
----

Ihr lokaler _master_ Branch ist verschwunden, da er durch den _main_ Branch ersetzt wurde.
Der _main_ Branch ist auch auf dem Remote-Rechner verfügbar.
Aber der Remote-Rechner hat immer noch einen _master_ Branch.
Andere Personen werden weiterhin den _master_ Branch als Basis für ihre Arbeit verwenden können, bis Sie weitere Änderungen vorgenommen haben.

Nun haben Sie noch einige Aufgaben vor sich, um den Wechsel abzuschließen:

* Alle Projekte, die von diesem Projekt abhängen, müssen ihren Code und/oder ihre Konfiguration aktualisieren
* Aktualisieren aller Konfigurationsdateien des Testers
* Anpassung der Build- und Release-Skripts
* Ändern der Einstellungen auf dem Repo-Host für Sachen wie den Standard-Branch des Repos, Merge-Regeln und anderes, das mit Branchnamen zusammenhängt
* Aktualisieren der Referenzen zum alten Branch in der Dokumentation
* Schließen oder Mergen aller Pull-Requests, die auf den alten Branch gerichtet sind

Wenn Sie alle diese Aufgaben erledigt haben und sicher sind, dass der neue _main_-Branch genauso funktioniert wie der alte _master_-Branch, können Sie den _master_-Branch löschen:

[source, console]
----
$ git push origin --delete master
----
