=== Ein Projekt verwalten

(((maintaining a project)))
Sie müssen nicht nur wissen, wie Sie effektiv zu einem Projekt etewas beitragen, sondern auch wissen, wie Sie ein Projekt verwalten.
Sie müssen bspw. wissen wie sie Patches akzeptieren und anwenden, die über `format-patch` generiert und per E-Mail an Sie gesendet wurden. Weiterhin sollten sie wissen wie sie Änderungen in Remote-Branches für Repositorys integrieren, die Sie als Remotes zu Ihrem Projekt hinzugefügt haben.
Unabhängig davon, ob Sie ein zentrales Repository verwalten oder durch Überprüfen oder Genehmigen von Patches helfen möchten, müssen Sie wissen, wie Sie die Arbeit auf eine Weise akzeptieren, die für andere Mitwirkende transparent und auf lange Sicht auch nachhaltig ist.

==== Arbeiten in Themen Branches

(((branches, topic)))
Wenn man vor hat, neuen Quelltext zu integrieren, ist es im Allgemeinen eine gute Idee, sie in einem _Topic Branch_ auszuprobieren - einem temporären Branch, der speziell zum Ausprobieren dieser neuen Änderungen erstellt wurde.
Auf diese Weise ist es einfach, einen Patch einzeln zu optimieren und ihn nicht weiter zu bearbeiten, wenn er nicht funktioniert, bis Sie Zeit haben, sich wieder damit zu befassen.
Sie sollten einen einfachen Branchnamen erstellen, der auf dem Thema der Arbeit basiert, die Sie durchführen, wie z.B. `ruby_client` oder etwas ähnlich sprechendes. Dann können Sie sich später leichter daran erinnern, falls Sie den Branch für eine Weile haben ruhen lassen und später daran weiter arbeiten.
Der Betreuer des Git-Projekts neigt auch dazu, diese Branches mit einem Namespace zu versehen - wie z. B. `sc/ruby_client`, wobei `sc` für die Person steht, die die Arbeit beigesteuert hat.
Wie Sie sich erinnern werden, können Sie den Branch basierend auf Ihrem `master`-Branch wie folgt erstellen:

[source,console]
----
$ git branch sc/ruby_client master
----

Wenn sie anschliessend sofort zum neuen Branch wechseln möchten, können Sie auch die Option `checkout -b` verwenden:

[source,console]
----
$ git checkout -b sc/ruby_client master
----

Jetzt können Sie die eingereichte Arbeit zu diesem Branch hinzufügen und festlegen, ob Sie ihn mit Ihren bestehenden Branches zusammenführen möchten.

[[_patches_from_email]]
==== Anwenden von Änderungen aus E-Mails

(((email, applying patches from)))
Wenn Sie einen Patch per E-Mail erhalten, den Sie in Ihr Projekt integrieren müssen, müssen Sie den Patch in Ihrer Themen Branch anwenden, damit sie ihn prüfen können.
Es gibt zwei Möglichkeiten, einen per E-Mail versendeten Patch anzuwenden: mit `git apply` oder mit` git am`.

===== Änderungen mit `apply` anwenden

(((git commands, apply)))
Wenn Sie den Patch von jemandem erhalten haben, der ihn mit `git diff` oder mit einer Variante Unix-Befehls` diff` erzeugt hat (was nicht empfohlen wird; siehe nächster Abschnitt), können Sie ihn mit dem Befehl `git apply` anwenden.
Angenommen Sie haben den Patch unter `/tmp/patch-ruby-client.patch` gespeichert. Dann können Sie den Patch folgendermaßen anwenden:

[source,console]
----
$ git apply /tmp/patch-ruby-client.patch
----

Hierdurch werden die Dateien in Ihrem Arbeitsverzeichnis geändert.
Es ist fast identisch mit dem Ausführen eines `patch -p1` Befehls zum Anwenden des Patches, obwohl es paranoider ist und unscharfe Übereinstimmungen selektiver als `patch' akzeptiert.
Damit kann man auch Dateien Hinzufügen, Löschen und Umbenennen, wenn diese im `git diff`-Format beschrieben sind, was mit `patch` nicht möglich ist.
Zu guter letzt ist `git apply` ein ``wende alles oder nichts an''-Modell, bei dem entweder alles oder nichts angewendet wird, wohingegen `patch` Patchdateien teilweise anwenden kann und Ihr Arbeitsverzeichnis in einnm undefinierten Zustand versetzen kann.
`git apply` ist insgesamt sehr viel konservativer als` patch`.
Es wird kein Commit für Sie erstellen. Nach dem Ausführen müssen Sie die eingeführten Änderungen manuell bereitstellen und einchecken.

Sie können auch `git apply` verwenden, um zu prüfen, ob ein Patch ordnungsgemäß angewendet wird, bevor Sie versuchen, ihn tatsächlich anzuwenden. Sie können `git apply --check` auf den Patch ausführen:

[source,console]
----
$ git apply --check 0001-seeing-if-this-helps-the-gem.patch
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
----

Wenn keine Ausgabe erfolgt, sollte der Patch ordnungsgemäß angewendet werden können.
Dieser Befehl wird auch mit einem Rückgabewert ungleich Null beendet, wenn die Prüfung fehlschlägt, sodass Sie ihn bei Bedarf in Skripten verwenden können.

[[_git_am]]
===== Änderungen mit `am` anwenden

(((git commands, am)))
Wenn der Beitragende ein Git-Benutzer ist und den Befehl `format-patch` zum Generieren seines Patches verwendet hat, ist Ihre Arbeit einfacher. Der Patch enthält bereits Informationen über dem Autor und eine entsprechende Commitnachricht.
Wenn möglich, ermutigen Sie die Beitragenden `format-patch` anstelle von `diff` zum erstellen von Patches zu verwenden.
Sie sollten `git apply` nur für ältere Patches und ähnliche Dinge verwenden.

Um einen von `format-patch` erzeugten Patch anzuwenden, verwenden Sie `git am` (der Befehl heißt `am`, da er verwendet wird, um „eine Reihe von Patches aus einer Mailbox anzuwenden“).
Technisch gesehen ist `git am` so aufgebaut, dass eine mbox-Datei gelesen werden kann. Hierbei handelt es sich um ein einfaches Nur-Text-Format zum Speichern einer oder mehrerer E-Mail-Nachrichten in einer Textdatei.
Das sieht in etwa so aus:

[source,console]
----
From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
From: Jessica Smith <jessica@example.com>
Date: Sun, 6 Apr 2008 10:17:23 -0700
Subject: [PATCH 1/2] add limit to log function

Limit log functionality to the first 20
----

Dies ist der Anfang der Ausgabe des Befehls `git format-patch`, den Sie im vorherigen Abschnitt gesehen haben. Es zeigt ein gültiges mbox Email Format.
Wenn Ihnen jemand den Patch ordnungsgemäß mit `git send-email` per E-Mail zugesendet hat und Sie ihn in ein mbox-Format herunterladen, können Sie `git am` auf diese mbox-Datei auführen und alle angezeigten Patches werden entsprechend angewendet.
Wenn Sie einen Mail-Client ausführen, der mehrere E-Mails im Mbox-Format speichern kann, können Sie ganze Patch-Serien in einer Datei speichern und diese dann mit `git am` einzeln anwenden.

Wenn jedoch jemand eine mit `git format-patch` erzeugte Patch-Datei in ein Ticketing-System oder ähnliches hochgeladen hat, können Sie die Datei lokal speichern und diese auf Ihrer Festplatte gespeicherte Datei dann an `git am` übergeben, um sie anzuwenden:

[source,console]
----
$ git am 0001-limit-log-function.patch
Applying: add limit to log function
----

Sie können sehen, dass es korrekt angewendet und das neue Commit automatisch für Sie erstellt wurde.
Die Autoreninformationen werden aus den Kopfzeilen `From` und `Date` der E-Mail entnommen und die Nachricht des Commits wird aus dem `Subject` und dem Textkörper (vor dem Patch) der E-Mail entnommen.
Wenn dieser Patch beispielsweise aus dem obigen mbox-Beispiel angewendet würde, würde der erzeugte Commit ungefähr so aussehen:

[source,console]
----
$ git log --pretty=fuller -1
commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
Author:     Jessica Smith <jessica@example.com>
AuthorDate: Sun Apr 6 10:17:23 2008 -0700
Commit:     Scott Chacon <schacon@gmail.com>
CommitDate: Thu Apr 9 09:19:06 2009 -0700

   add limit to log function

   Limit log functionality to the first 20
----

Die `Commit`-Informationen gibt die Person an, die den Patch angewendet hat und den Zeitpunkt, wann er angewendet wurde.
Die `Author`-Information gibt die Person an, die den Patch ursprünglich erstellt hat und wann er ursprünglich erstellt wurde.

Es besteht jedoch die Möglichkeit, dass der Patch nicht sauber angewendet werden kann.
Möglicherweise ist Ihr Hauptbranch zu weit vom Branch entfernt, von dem aus der Patch erstellt wurde. Oder aber der Patch hängt noch von einem anderen Patch ab, den Sie noch nicht angewendet haben.
In diesem Fall schlägt der Prozess `git am` fehl und Sie werden gefragt, was Sie tun möchten:

[source,console]
----
$ git am 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Patch failed at 0001.
When you have resolved this problem run "git am --resolved".
If you would prefer to skip this patch, instead run "git am --skip".
To restore the original branch and stop patching run "git am --abort".
----

Dieser Befehl fügt Konfliktmarkierungen in alle Dateien ein, in denen Probleme auftreten. Ähnlich wie bei einem Konflikt bei der Zusammenführung (engl. merge) bzw. der Reorganisation (engl rebase).
Sie lösen dieses Problem auf die gleiche Weise: Bearbeiten Sie die Datei, um den Konflikt zu lösen. Anschliessend fügen sie die neue Datei der Staging Area hinzu und führen Sie dann `git am --resolved` aus, um mit dem nächsten Patch fortzufahren:

[source,console]
----
$ (fix the file)
$ git add ticgit.gemspec
$ git am --resolved
Applying: seeing if this helps the gem
----

Wenn Sie möchten, dass Git den Konflikt etwas intelligenter löst, können Sie ihm die Option "-3" übergeben, wodurch Git versucht, eine Dreifachzusammenführung durchzuführen.
Diese Option ist standardmäßig nicht aktiviert, da sie nicht funktioniert, wenn sich das Commit, auf dem der Patch basiert, nicht in Ihrem Repository befindet.
Wenn Sie diesen Commit haben - wenn der Patch auf einem öffentlichen Commit basiert -, ist die Option "-3" im Allgemeinen viel intelligenter beim Anwenden eines Patch mit Konflikten:

[source,console]
----
$ git am -3 0001-seeing-if-this-helps-the-gem.patch
Applying: seeing if this helps the gem
error: patch failed: ticgit.gemspec:1
error: ticgit.gemspec: patch does not apply
Using index info to reconstruct a base tree...
Falling back to patching base and 3-way merge...
No changes -- Patch already applied.
----

In diesem Fall wäre der Patch ohne die Option "-3" als Konflikt gewertet worden.
Da die Option "-3" verwendet wurde, wurde der Patch sauber angewendet.

Wenn Sie mehrere Patches von einer mbox aus anwenden, können Sie auch den Befehl `am` im interaktiven Modus ausführen. Bei jedem gefundenen Patch wird angehalten und Sie werden gefragt, ob Sie ihn anwenden möchten:

[source,console]
----
$ git am -3 -i mbox
Commit Body is:
--------------------------
seeing if this helps the gem
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all
----

Dies ist hilfreich, wenn Sie eine Reihe von Patches gespeichert haben, da Sie den Patch zuerst anzeigen können, wenn Sie sich nicht daran erinnern, worum es genau geht. Oder aber weil sie den Patch nicht anwenden können, weil Sie dies bereits getan haben.

Wenn alle Patches für Ihr Thema angewendet und in Ihrem Branch festgeschrieben wurden, können Sie auswählen, ob und wie Sie sie in einen Hauptzweig integrieren möchten.

[[_checking_out_remotes]]
==== Remote Branches auschecken

(((branches, remote)))
Wenn sie einen Beitrag erhalten, der von einem Git-Benutzer stammt, der sein eigenes Repository eingerichtet, eine Reihe von Änderungen vorgenommen und Ihnen dann die URL zum Repository und den Namen des Remote-Zweigs gesendet hat, in dem sich die Änderungen befinden, können Sie diesen als remote hinzufügen und die Änderungen lokal zusammenführen.

Wenn Jessica Ihnen beispielsweise eine E-Mail sendet, die besagt, dass sie eine großartige neue Funktion im `ruby-client` Branch ihres Repositorys hat, können Sie diese testen, indem Sie den Branch als remote hinzufügen und ihn lokal auschecken:

[source,console]
----
$ git remote add jessica git://github.com/jessica/myproject.git
$ git fetch jessica
$ git checkout -b rubyclient jessica/ruby-client
----

Wenn sie Ihnen später erneut eine E-Mail mit einem anderen Branch sendet, der eine weitere großartige Funktion enthält, können Sie diese direkt abrufen und auschecken, da Sie bereits über das Remote Repository verfügen.

Dies ist am nützlichsten, wenn Sie durchweg mit einer Person arbeiten.
Wenn nur ein Patch von Zeit zu Zeit zur Verfügung steht, ist das Akzeptieren über E-Mail möglicherweise weniger zeitaufwendig, als dass jeder seinen eigenen Server unterhalten und Remotes hinzufügen und entfernen muss, um einige wenige Patches zu erhalten.
Es ist auch unwahrscheinlich, dass Sie Hunderte von Remotes einbinden möchten für Personen, die nur ein oder zwei Patches beisteuern.
Skripte und gehostete Dienste können dies jedoch vereinfachen - dies hängt weitgehend davon ab, wie Sie und die Mitwirkenden sich entwickeln.

Der andere Vorteil dieses Ansatzes ist, dass Sie auch die Historie der Commits erhalten.
Obwohl Sie möglicherweise berechtigte Probleme bei der Zusammenführungen haben, wissen Sie, wo in Ihrer Hisorie deren Arbeit basiert. Eine ordnungsgemäße Drei-Wege-Zusammenführung ist die Standardeinstellung, anstatt ein "-3" einzugeben, und sie hoffen, dass der Patch aus einem öffentlichen Commit generiert wurde, auf den Sie Zugriff haben.

Wenn Sie nicht durchgehen mit einer Person arbeiten, aber dennoch auf diese Weise von dieser Person abrufen möchten, können Sie die URL des Remote-Repositorys für den Befehl `git pull` angeben.
Dies führt einen einmaligen Abruf durch und speichert die URL nicht als Remote-Referenz:

[source,console]
----
$ git pull https://github.com/onetimeguy/project
From https://github.com/onetimeguy/project
 * branch            HEAD       -> FETCH_HEAD
Merge made by the 'recursive' strategy.
----

[[_what_is_introduced]]
==== Bestimmen, was eingeführt wird

(((branches, diffing)))
Jetzt haben Sie einen Themen Branch mit neuen Beiträgen.
An dieser Stelle können Sie festlegen, was Sie damit machen möchten.
In diesem Abschnitt werden einige Befehle noch einmal behandelt, damit Sie sehen können, wie Sie sie verwenden können. So können sie genau überprüfen, was Sie einführen, wenn Sie die Beiträge in Ihrem Haupt Branch zusammenführen.

Es ist oft hilfreich, eine Übersicht über alle Commits zu erhalten, die sich in diesem Branch jedoch nicht in Ihrem Master-Branch befinden.
Sie können Commits im Master-Branch ausschließen, indem Sie die Option "--not" vor dem Branchnamen hinzufügen.
Dies entspricht dem Format `master..contrib`, das wir zuvor verwendet haben.
Wenn Ihr Mitarbeiter Ihnen beispielsweise zwei Patches sendet und Sie einen Branch mit dem Namen `contrib` erstellen und diese Patches dort anwenden, können Sie Folgendes ausführen:

[source,console]
----
$ git log contrib --not master
commit 5b6235bd297351589efc4d73316f0a68d484f118
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Oct 24 09:53:59 2008 -0700

    seeing if this helps the gem

commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Oct 22 19:38:36 2008 -0700

    updated the gemspec to hopefully work better
----

Denken Sie daran, dass Sie die Option `-p` an `git log` übergeben können, um zu sehen, welche Änderungen jeder Commit einführt, und den Diff an jeden Commit anfügt.

Um einen vollständigen Überblick darüber zu erhalten, was passieren würde, wenn Sie diesen Branch mit einem anderen Branch zusammenführen würden, müssen Sie möglicherweise einen ungeröhnlichen Kniff anwenden, um die richtigen Ergebnisse zu erzielen.
Eventuell denken sie daran folgendes auszuführen:

[source,console]
----
$ git diff master
----

Dieser Befehl gibt Ihnen den Unterschied zurück, jedoch kann dies irreführend sein.
Wenn Ihr Master-Branch vorgerückt ist, seit Sie den Themen-Branch daraus erstellt haben, erhalten Sie scheinbar unerwartete Ergebnisse.
Dies geschieht, weil Git den Snapshots des letzten Commits des Branches, in dem Sie sich befinden, und den Snapshot des letzten Commits des Branches `master` direkt miteinander vergleicht.
Wenn Sie beispielsweise eine Zeile in eine Datei im Branch `master` eingefügt haben, sieht ein direkter Vergleich der Snapshots so aus, als würde der Themen Branch diese Zeile entfernen.

Wenn `master` ein direkter Vorgänger Ihres Themen Branches ist, ist dies kein Problem. Wenn die beiden Historien jedoch voneinander abweichen, sieht es so aus, als würden Sie alle neuen Inhalte in Ihrem Themen Branch hinzufügen und alles entfernen, was für den `master` Branch eindeutig ist.

Was Sie wirklich sehen möchten, sind die Änderungen, die dem Themen Branch hinzugefügt wurden - die Arbeit, die Sie hinzufügen, wenn Sie den neuen Branch mit `master` zusammenführen.
Sie tun dies, indem Git das letzte Commit in Ihrem Themen Branch mit dem ersten gemeinsamen Vorgänger vom `master` Branch vergleicht.

Technisch gesehen können Sie dies tun, indem Sie den gemeinsamen Vorgänger explizit herausfinden und dann Ihr `diff` darauf ausführen:

[source,console]
----
$ git merge-base contrib master
36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
$ git diff 36c7db
----

oder kurzgefasst:

[source,console]
----
$ git diff $(git merge-base contrib master)
----

Beides ist jedoch nicht besonders praktisch, weshalb Git eine andere Weg für diesen Vorgang bietet: die Drei-Punkt-Syntax (engl. Triple-Dot-Syntax).
Im Kontext des Befehls `git diff` können Sie drei Punkte nach einem anderen Branch einfügen, um ein `diff` zwischen dem letzten Commit ihres aktullen Branchs, in dem Sie sich befinden, und dem gemeinsamen Vorgänger eines anderen Branches zu erstellen:

[source,console]
----
$ git diff master...contrib
----

Dieser Befehl zeigt Ihnen nur die Arbeit an, die Ihr aktueller Branch seit seinem gemeinsamen Vorgänger mit master eingeführt hat.
Dies ist eine sehr nützliche Syntax, die sie sich merken sollten.

==== Beiträge integrieren

(((integrating work)))
Wenn alle Arbeiten in Ihrem Themen Branch bereit sind, um in ein größeren Hauptbranch integriert zu werden, lautet die Frage, wie Sie dies tun können.
Welchen Workflow möchten Sie verwenden, um Ihr Projekt zu verwalten?
Sie haben eine Reihe von Möglichkeiten, daher werden wir einige davon behandeln.

===== Workflows zusammenführen (engl. mergen)

(((workflows, merging)))
Ein grundlegender Workflow besteht darin, all diese Arbeiten einfach direkt in Ihrem `master`Branch zusammenzuführen.
In diesem Szenario haben Sie einen `master`-Branch, der stabilen Code enthält.
Wenn Sie in einem Branch arbeiten, von dem Sie glauben, dass Sie ihn abgeschlossen haben, oder von jemand anderem beigesteuert und überprüft haben, führen Sie ihn in Ihrem Hauptbranch zusammen. Löschen sie anschliessend diesen gerade zusammengeführten Branch und wiederholen diesen Vorgang bei Bedarf.

Wenn wir zum Beispiel ein Repository mit zwei Branches namens `ruby_client` und `php_client` haben, die wie <<merwf_a>> aussehen, und wir `ruby_client` gefolgt von `php_client` zusammenführen, sieht Ihr Verlauf wie <<merwf_b>> aus.

[[merwf_a]]
.Historie mit meheren Topic Branches.
image::images/merging-workflows-1.png[Historie mit meheren Topic Branches.]

[[merwf_b]]
.Status nach einem Themen Branch Merge.
image::images/merging-workflows-2.png[Status nach einem Themen Branch Merge.]

Das ist wahrscheinlich der einfachste Workflow. Es kann jedoch zu Problemen können, wenn Sie größere oder stabilere Projekte bearbeiten. Sie müssen bei der Einführung von Änderungen sehr vorsichtig sein.

Wenn Sie ein wichtigeres Projekt haben, möchten Sie möglicherweise einen zweistufigen Merge Prozess verwenden.
In diesem Szenario haben Sie zwei lange laufende Branches namens `master` und `develop`. Sie legen fest, dass `master` nur dann aktualisiert wird, wenn eine sehr stabile Version vorhanden ist und der gesamte neue Code in den Branch `develop` integriert wird.
Sie pushen diese beiden Branches regelmäßig in das öffentliche Repository.
Jedes Mal, wenn Sie einen neuen Branch zum Zusammenführen haben (<<merwf_c>>), führen Sie ihn in `develop` (<< merwf_d >>) zusammen. Wenn Sie ein Release mit einem Tag versehen, spulen Sie `master` an die Stelle weiter, an der sich der jetzt stabile `develop`-Branch befindet (<<merwf_e>>).

[[merwf_c]]
.Vor einem Themen Branch Merge.
image::images/merging-workflows-3.png[Vor einem Themen Branch Merge.]

[[merwf_d]]
.Nach einem Themen Branch Merge.
image::images/merging-workflows-4.png[Nach einem Themen Branch Merge.]

[[merwf_e]]
.Nach einem Projekt Release.
image::images/merging-workflows-5.png[Nach einem Projekt Release.]

Auf diese Weise können Benutzer, die das Repository Ihres Projekts klonen, entweder `master` oder `develop` auschecken. Mit `master` können sie die neueste stabile Version erstellen und somit recht einfache auf dem neuesten Stand bleiben. Oder sie können `develop` auschecken, welchen den aktuellsten Inhalt darstellt.
Sie können dieses Konzept auch erweitern, indem Sie einen `integrate`-Branch einrichten, in dem alle Arbeiten zusammengeführt werden.
Wenn die Codebasis auf diesem Branch stabil ist und die Tests erfolgreich sind, können Sie sie zu einem Entwicklungsbranch zusammen führen. Wenn sich das als stabil erwiesen hat, können sie ihren `master`-Branch fast-forwarden.

===== Workflows mit umfangreichen Merges

(((workflows, "merging (large)")))
Das Git-Projekt hat vier lange laufende Branches: `master`, `next` und `pu` (vorgeschlagene Updates) für neue Arbeiten und `maint` für Wartungs-Backports.
Wenn neue Arbeiten von Mitwirkenden eingereicht werden, werden sie in ähnlicher Weise wie oben beschrieben in Themenbranches im Projektarchiv des Betreuers gesammelt (siehe <<merwf_f>>).
Zu diesem Zeitpunkt werden die Themen evaluiert, um festzustellen, ob sie korrekt sind und zur Weiterverarbeitung bereit sind oder ob sie Nacharbeit benötigen.
Wenn sie korrekt sind, werden sie zu `next` zusammengeführt, und dieser Branch wird gepushed, damit jeder die miteinander integrierten Themen testen kann.

[[merwf_f]]
.Verwaltung einer komplexen Reihe paralleler Themenbranches.
image::images/large-merges-1.png[Verwaltung einer komplexen Reihe paralleler Themenbranches.]

Wenn die Themen noch bearbeitet werden müssen, werden sie in `pu` gemerged.
Wenn festgestellt wird, dass sie absolut stabil sind, werden die Themen wieder zu `master` zusammengeführt.
Die Branches `next` und `pu` werden dann vom `master` neu aufgebaut.
Dies bedeutet, dass `master` fast immer vorwärts geht, `next` wird gelegentlich neu rebased und `pu` noch häufiger rebased wird:

.Zusammenführen von Themen Branches in langfristige Integrationsbranches.
image::images/large-merges-2.png[Zusammenführen von Themen Branches in langfristige Integrationsbranches.]

Wenn ein Branch schließlich zu `master` zusammengeführt wurde, wird er aus dem Repository entfernt.
Das Git-Projekt hat auch einen `maint`-Branch, der von der letzten Version geforkt wurde, um für den Fall, dass eine Wartungsversion erforderlich ist, Backport-Patches bereitzustellen.
Wenn Sie das Git-Repository klonen, stehen Ihnen vier Branches zur Verfügung, mit denen Sie das Projekt in verschiedenen Entwicklungsstadien bewerten können, je nachdem, wie aktuell Sie sein möchten oder wie Sie einen Beitrag leisten möchten. Der Betreuer verfügt über einen strukturierten Workflow, der ihm hilft, neue Beiträge zu überprüfen.
Der Workflow des Git-Projekts ist sehr speziell.
Um dies klar zu verstehen, können Sie das https://github.com/git/git/blob/master/Documentation/howto/maintain-git.txt[Git Maintainer's guide] lesen.

[[_rebase_cherry_pick]]
===== Rebasing und Cherry-Picking Workflows

(((workflows, rebasing and cherry-picking)))
Andere Betreuer bevorzugen es, die Arbeit auf ihrem Masterbranch zu rebasen oder zu cherry-picken, anstatt sie zusammenzuführen, um einen linearen Verlauf beizubehalten.
Wenn Sie in einem Themen Branch arbeiten und sich dazu entschlossen haben, ihn zu integrieren, wechseln Sie in diesen Branch und führen den `rebase`Befehl aus. Damit stellen sie die , um die Änderungen auf Ihrem aktuellen `master` (oder `develop`-Branch usw.) wiederherzustellen.
Wenn das gut funktioniert, können Sie Ihren `master`-Branch fast-forwarden, und Sie erhalten eine lineare Projekthistorie.

(((git commands, cherry-pick)))
Die andere Möglichkeit, die eingeführte Arbeit von einem Branch in einen anderen zu verschieben, besteht darin, sie zu cherry-picken.
Ein Cherry-Pick in Git ist wie ein Rebase für ein einzelnes Commit.
Es verwendet den Patch, der in einem Commit eingeführt wurde, und versucht, ihn erneut auf den Branch anzuwenden, auf dem Sie sich gerade befinden.
Dies ist nützlich, wenn Sie eine Reihe von Commits für einen Branch haben und nur eine davon integrieren möchten, oder wenn Sie nur einen Commit für einen Branch haben und Sie es vorziehen, diese zu cherry-picken, anstatt ein Rebase auszuführen.
Angenommen, Sie haben ein Projekt, das folgendermaßen aussieht:

.Beispiel Historie vor einem Cherry-Pick.
image::images/rebasing-1.png[Beispiel Historie vor einem Cherry-Pick.]

Wenn Sie das Commit "e43a6" in Ihren Master-Branch ziehen möchten, können Sie folgendes ausführen:

[source,console]
----
$ git cherry-pick e43a6
Finished one cherry-pick.
[master]: created a0a41a9: "More friendly message when locking the index fails."
 3 files changed, 17 insertions(+), 3 deletions(-)
----

Dies zieht die gleiche Änderung nach sich, die in `e43a6` eingeführt wurde. Sie erhalten jedoch einen neuen Commit SHA-1-Wert, da das angewendete Datum unterschiedlich ist.
Nun sieht die Historie so aus:

.Historie nach Cherry-Picken eines Commits auf einen Themen Branch.
image::images/rebasing-2.png[Historie nach Cherry-Picken eines Commits auf einen Themen Branch.]

Jetzt können Sie Ihren Themen Branch entfernen und die Commits löschen, die Sie nicht mehr benötigen.

===== Rerere

(((git commands, rerere)))(((rerere)))
Wenn Sie viel mergen und rebasen oder einen langlebigen Themenbranch pflegen, hat Git eine Funktion namens ``rerere'', die helfen kann.

Rerere steht für ``reuse recorded resolution'' (deutsch ``Aufgezeichnete Lösung wiederverwenden'') - es ist eine Möglichkeit, die manuelle Konfliktlösung zu verkürzen.
Wenn rerere aktiviert ist, behält Git eine Reihe von Pre- und Post-Images von erfolgreichen Commits bei. Wenn es feststellt, dass ein Konflikt genau so aussieht, wie der, den Sie bereits behoben haben, wird nur die Korrektur vom letzten Mal verwendet , ohne nochmal zu belästigen.

Diese Funktion besteht aus zwei Teilen: einer Konfigurationseinstellung und einem Befehl.
Die Konfigurationseinstellung lautet `rerere.enabled`. Man kann sie in die globale Konfiguration eingeben:

[source,console]
----
$ git config --global rerere.enabled true
----

Wenn Sie nun einen merge durchführen, der die Konflikte auflöst, wird diese Auflösung im Cache gespeichert, falls Sie sie in Zukunft benötigen.

Bei Bedarf können Sie mit dem Cache interagieren mittels dem Befehl `git rerere`.
Wenn es aufgerufen wird, überprüft Git seine Lösungsdatenbank und versucht eine Übereinstimmung mit aktuellen Mergekonflikten zu finden und diese zu lösen (dies geschieht jedoch automatisch, wenn `rerere.enabled` auf` true` gesetzt ist).
Es gibt auch Unterbefehle, um zu sehen, was aufgezeichnet wird, um eine bestimmte Konfliktlösung aus dem Cache zu löschen oder um den gesamten Cache zu löschen.
Wir werden uns in <<ch07-git-tools#ref_rerere>> eingehender mit rerere beschäftigen.

[[_tagging_releases]]
==== Tagging ihres Releases

(((tags)))(((tags, signing)))
Wenn Sie sich entschieden haben, ein Release zu erstellen, dann möchten Sie wahrscheinlich einen Tag zuweisen, damit Sie dieses Release in Zukunft jederzeit neu erstellen können.
Sie können einen neuen Tag erstellen, wie in <<ch02-git-basics-chapter#ch02-git-basics-chapter>> beschrieben.
Wenn Sie den Tag als Betreuer signieren möchten, sieht der Tag möglicherweise folgendermaßen aus:

[source,console]
----
$ git tag -s v1.5 -m 'my signed 1.5 tag'
You need a passphrase to unlock the secret key for
user: "Scott Chacon <schacon@gmail.com>"
1024-bit DSA key, ID F721C45A, created 2009-02-09
----

Wenn Sie Ihre Tags signieren, haben Sie möglicherweise das Problem, den öffentlichen PGP-Schlüssel zu verteilen, der zum Signieren Ihrer Tags verwendet wird.
Der Betreuer des Git-Projekts hat dieses Problem behoben, indem er seinen öffentlichen Schlüssel als Blob in das Repository aufgenommen und anschließend ein enTag hinzugefügt hat, der direkt auf diesen Inhalt verweist.
Um dies zu tun, können Sie herausfinden, welchen Schlüssel Sie möchten, indem Sie `gpg --list-keys` ausführen:

[source,console]
----
$ gpg --list-keys
/Users/schacon/.gnupg/pubring.gpg
---------------------------------
pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
uid                  Scott Chacon <schacon@gmail.com>
sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]
----

Anschließend können Sie den Schlüssel direkt in die Git-Datenbank importieren, indem Sie ihn exportieren und diesen über `git hash-object` weiterleiten. Dadurch wird ein neuer Blob mit diesen Inhalten in Git geschrieben und Sie erhalten den SHA-1 des Blobs zurück:

[source,console]
----
$ gpg -a --export F721C45A | git hash-object -w --stdin
659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Nachdem Sie nun den Inhalt Ihres Schlüssels in Git haben, können Sie einen Tag erstellen, der direkt darauf verweist, indem Sie den neuen SHA-1-Wert angeben, den Sie mit dem Befehl `hash-object` erhalten haben:

[source,console]
----
$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92
----

Wenn Sie `git push --tags` ausführen, wird der `maintainer-pgp-pub`-Tag für alle freigegeben.
Wenn jemand einen Tag verifizieren möchte, kann er Ihren PGP-Schlüssel direkt importieren, indem er den Blob direkt aus der Datenbank zieht und in GPG importiert:

[source,console]
----
$ git show maintainer-pgp-pub | gpg --import
----

Mit diesem Schlüssel können sie alle Ihre signierten Tags überprüfen.
Wenn Sie der Tag-Nachricht Anweisungen hinzufügen, können Sie dem Endbenutzer mit `git show <tag>` genauere Anweisungen zur Tag-Überprüfung geben.

[[_build_number]]
==== Eine Build Nummer generieren

(((build numbers)))(((git commands, describe)))
Da Git nicht über ansteigende Zahlen wie 'v123' oder das Äquivalent für jedes Commit verfügt, können Sie für dieses Commit den Befehl `git describe` ausführen, wenn Sie einen lesbaren Namen für einen Commit benötigen.
Als Antwort generiert Git eine Zeichenfolge, die aus dem Namen des jüngsten Tags vor diesem Commit besteht, gefolgt von der Anzahl der Commits seit diesem Tag, gefolgt von einem partiellen SHA-1-Wert des beschriebene Commits (vorangestelltem wird dem Buchstaben "g" für Git):

[source,console]
----
$ git describe master
v1.6.2-rc1-20-g8c5b85c
----

Auf diese Weise können Sie einen Snaphot exportieren oder einen Build erstellen und einen verständlichen Namen vergeben.
Wenn Sie Git aus den Quellcode erstellen, der aus dem Git-Repository geklont wurde, erhalten Sie mit `git --version` etwas, das genau so aussieht.
Wenn Sie einen Commit beschreiben, den Sie direkt getaggt haben, erhalten Sie einfach den Tag-Namen.

Standardmäßig erfordert der Befehl `git describe` mit Anmerkungen versehene Tags (Tags, die mit dem Flag `-a` oder `-s` erstellt wurden). Wenn Sie auch leichte (nicht mit Anmerkungen versehene) Tags verwenden möchten, fügen Sie dem Befehl die Option `--tags` hinzu.
Sie können diese Zeichenfolge auch als Ziel der Befehle `git checkout` oder `git show` verwenden, obwohl sie auf dem abgekürzten SHA-1-Wert am Ende basiert, sodass sie möglicherweise nicht für immer gültig ist.
Zum Beispiel hat der Linux-Kernel kürzlich einen Sprung von 8 auf 10 Zeichen gemacht, um die Eindeutigkeit von SHA-1-Objekten zu gewährleisten, sodass ältere Ausgabenamen von `git describe` ungültig wurden.

[[_preparing_release]]
==== Ein Release vorbereiten

(((releasing)))(((git commands, archive)))
Nun möchten Sie einen Build freigeben.
Eines der Dinge, die Sie tun möchten, ist, ein Archiv des neuesten Schnappschusses Ihres Codes für die armen Seelen zu erstellen, die Git nicht verwenden.
Der Befehl dazu lautet `git archive`:

[source,console]
----
$ git archive master --prefix='project/' | gzip > `git describe master`.tar.gz
$ ls *.tar.gz
v1.6.2-rc1-20-g8c5b85c.tar.gz
----

Wenn jemand dieses Archiv öffnet, erhält er den neuesten Schnappschuss Ihres Projekts in einem Projektverzeichnis.
Sie können ein zip-Archiv auch auf die gleiche Weise erstellen, indem Sie jedoch die Option `--format=zip` an `git archive` übergeben:

[source,console]
----
$ git archive master --prefix='project/' --format=zip > `git describe master`.zip
----

Sie haben jetzt einen schönen Tarball und ein Zip-Archiv Ihrer Projektversion, die Sie auf Ihre Website hochladen oder per E-Mail an andere Personen senden können.

[[_the_shortlog]]
==== Das Shortlog

(((git commands, shortlog)))
Es ist Zeit, eine E-Mail an die Personen Ihre Mailingliste zu senden, die wissen möchten, was in Ihrem Projekt vor sich geht.
Mit dem Befehl `git shortlog` können Sie schnell eine Art Änderungsprotokoll dessen abrufen, was Ihrem Projekt seit Ihrer letzten Veröffentlichung oder E-Mail hinzugefügt wurde.
Es fasst alle Commits in dem von Ihnen angegebenen Bereich zusammen. Im Folgenden finden Sie als Beispiel 0eine Zusammenfassung aller Commits seit Ihrer letzten Veröffentlichung, sofern Ihre letzte Veröffentlichung den Namen v1.0.1 hat:

[source,console]
----
$ git shortlog --no-merges master --not v1.0.1
Chris Wanstrath (6):
      Add support for annotated tags to Grit::Tag
      Add packed-refs annotated tag support.
      Add Grit::Commit#to_patch
      Update version and History.txt
      Remove stray `puts`
      Make ls_tree ignore nils

Tom Preston-Werner (4):
      fix dates in history
      dynamic version method
      Version bump to 1.0.2
      Regenerated gemspec for version 1.0.2
----

Sie erhalten eine übersichtliche Zusammenfassung aller Commits seit Version 1.0.1, gruppiert nach Autoren, die Sie per E-Mail an Ihre Mailingliste senden können.
