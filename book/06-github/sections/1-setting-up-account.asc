=== Einrichten und Konfigurieren eines Kontos

(((GitHub, Benutzerkonten)))
Das erste, was du tun musst, ist ein kostenloses Benutzerkonto einzurichten.
Besuche einfach https://github.com[^], wähle einen noch unbenutzten Usernamen, gib eine E-Mail-Adresse und ein Passwort ein und klicke auf die große grüne Schaltfläche „Bei GitHub Anmelden“.

.Das GitHub Anmeldeformular
image::images/signup.png[Das GitHub Anmeldeformular]

Das nächste was du sehen wirst, ist die Preisseite für Upgrade-Pakete. Du kannst diese jedoch vorerst ignorieren.
GitHub sendet dir eine E-Mail, um die von dir angegebene Adresse zu bestätigen.
Fahre fort indem du die erhaltene E-Mail bestätigst. Das ist ziemlich wichtig, wie wir später sehen werden.

[NOTE]
====
GitHub bietet fast alle Funktionen kostenlos an, mit Ausnahme einiger erweiterter Funktionen.

Die kostenpflichtigen Tarife von GitHub umfassen erweiterte Tools und Funktionen sowie erhöhte Limits für kostenlose Dienste. Diese werden in diesem Buch jedoch nicht behandelt.
Weitere Informationen zu verfügbaren Tarifen und deren Vergleich erhältst du unter https://de.github.com/pricing.html[^].
====

Wenn du auf das Octocat-Logo oben links auf dem Bildschirm klickst, gelangst du zu deiner Dashboard-Seite.
Ab jetzt kannst du GitHub benutzen.

==== SSH-Zugang

(((SSH Schlüssel, mit GitHub)))
Ab sofort kannst du dich uneingeschränkt mit Git-Repositorys über das `https://` Protokoll verbinden und dich mit dem gerade eingerichteten Benutzernamen und Passwort authentifizieren.
Um jedoch öffentliche Projekte einfach zu klonen, musst du dich nicht einmal anmelden. Das Konto, das wir gerade erstellt haben, benötigen wir nur, wenn wir Projekte forken und später zu unseren Forks etwas pushen.

Wenn du SSH-Remotes verwenden möchtest, musst du einen öffentlichen Schlüssel konfigurieren
Falls du noch keinen hast, siehe <<ch04-git-on-the-server#_generate_ssh_key,öffentlichen SSH-Schlüssel generieren>>.
Öffne deine Kontoeinstellungen über den Link oben rechts im Fenster:

.Der Link „Account-Einstellungen“
image::images/account-settings.png[Der Link „Account-Einstellungen“]

Wähle dann auf der linken Seite den Bereich „SSH-Schlüssel“.

.Der Link „SSH-Schlüssel“
image::images/ssh-keys.png[Der Link „SSH-Schlüssel“]

Klicke von dort aus auf die Schaltfläche „Add an SSH key“, gib deinem Schlüssel einen Namen, füge den Inhalt deiner `~/.ssh/id_rsa.pub` Public-Key-Datei (oder wie auch immer du sie genannt hast) in das Textfeld ein und klicke auf „Add key“.

[NOTE]
====
Achte darauf, dass du deinem SSH-Schlüssel einen Namen gibst, an den du dich gut erinnern kannst.
Du kannst jeden deiner Schlüssel (z.B. „Mein Laptop“ oder „Arbeitskonto“) benennen, so dass du, falls du einen Schlüssel später widerrufen musst, leichter erkennen kannst, nach welchem du suchst.
====

[[_personal_avatar]]
==== Dein Avatar-Bild

Als nächstes kannst du, wenn du möchtest, den für dich generierten Avatar durch ein Bild deiner Wahl ersetzen.
Gehe zunächst auf die Registerkarte „Profil“ (oberhalb der Registerkarte SSH-Schlüssel) und klicke auf „Neues Bild hochladen“.

.Der Link „Profile“
image::images/your-profile.png[Der Link „Profile“]

In diesem Beispiel wählen wir eine Kopie des Git-Logos, das sich auf unserer Festplatte befindet. Anschließend haben wir die Möglichkeit, es zurecht zu schneiden.

.Dein Avatar-Bild beschneiden
image::images/avatar-crop.png[Dein Avatar-Bild beschneiden]

Nun sehen die Betrachter überall dort, wo du auf der Website agierst, dein Avatar-Bild neben deinem Benutzernamen.

Wenn du beim beliebten Gravatar-Dienst (der oft für Wordpress-Konten verwendet wird) einen Avatar hochgeladen hast, wird dieser standardmäßig verwendet und du musst diesen Schritt nicht mehr ausführen.

==== Deine Email-Adressen

GitHub bildet deine Git Commits auf deinen Account ab, wobei die Zuordnung per E-Mail erfolgt.
Wenn du mehrere E-Mail-Adressen in deine Commits verwendest und möchtest, dass GitHub diese korrekt verknüpft, musst du alle von dir verwendeten E-Mail-Adressen in den E-Mail-Bereich des Admin-Bereichs aufnehmen.

[[_add_email_addresses]]
.E-Mail-Adressen hinzufügen
image::images/email-settings.png[E-Mail-Adressen hinzufügen]

Unter <<_add_email_addresses,E-Mail-Adressen hinzufügen>> kannst du den Status einer E-Mail Adresse einsehen. Einige der möglichen Zustände sind oben abgebildet.
Die oberste Adresse ist verifiziert und als Hauptadresse (engl. Primary) eingestellt, d.h. an diese Adresse gehen alle Benachrichtigungen und Empfangsbestätigungen.
Die zweite Adresse ist verifiziert und kann, wenn du sie wechseln möchtest, als primär eingestellt werden.
Die letzte Adresse ist noch nicht verifiziert, was bedeutet, dass du sie nicht zu deiner Hauptadresse machen kannst.
Wenn GitHub eine davon in Commit-Nachrichten in einem beliebigen Repository auf der Website sieht, wird dieser mit deinem Benutzer-Konto verknüpft.

==== Zwei-Faktor-Authentifizierung

Zuletzt solltest du aus Sicherheitsgründen auf jeden Fall die Zwei-Faktor-Authentifizierung oder „2FA“ einrichten.
Die Zwei-Faktor-Authentifizierung ist ein Authentifizierungs-Mechanismus, der in letzter Zeit immer beliebter wird. Damit wird das Risiko verringert, dass dein Account durch den Diebstahl deines Passworts Schaden erleidet.
Wenn du die Funktion einschaltest, fragt GitHub nach zwei verschiedenen Authentifizierungsmethoden, so dass ein Angreifer, wenn eine davon kompromittiert wird, nicht auf dein Konto zuzugreifen kann.

Du findest die Einstellungen für die Zwei-Faktor-Authentifizierung unter der Registerkarte „Password and authentication“ in deinen Kontoeinstellungen.

.„2FA“ auf der Security-Registerkarte
image::images/2fa-1.png[„2FA“ auf der Security-Registerkarte]

Wenn du auf die Schaltfläche „Zwei-Faktor-Authentifizierung einrichten“ klickst, gelangst du zu einer Konfigurationsseite, auf der du eine Handy-App wählen kannst, um deine sekundären Code zu generieren (ein „zeitbasiertes Einmalpasswort“). Alternativ kannst du dir bei jedem Login von GitHub einen Code per SMS zusenden lassen.

Nachdem du dich für eine der beiden Methoden entschieden hast und den Anweisungen zur Einrichtung von 2FA gefolgt bist, ist dein Konto etwas sicherer. Du musst nun bei jedem Login in GitHub neben deinem Passwort einen zusätzlichen Code eingeben.
