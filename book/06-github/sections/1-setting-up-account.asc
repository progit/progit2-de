=== Einrichten und Konfigurieren eines Kontos

(((GitHub, Benutzerkonten)))
Das erste, was Sie tun müssen, ist, ein kostenloses Benutzerkonto einzurichten.
Besuchen Sie einfach https://github.com[^], wählen Sie einen noch unbenutzten Usernamen, geben Sie eine E-Mail-Adresse und ein Passwort ein und klicken Sie auf die große grüne Schaltfläche „Bei GitHub Anmelden“

.Das GitHub Anmeldeformular
image::images/signup.png[Das GitHub Anmeldeformular]

Das nächste, was Sie sehen werden, ist die Preisseite für Upgrade-Pakete. Sie können diese jedoch vorerst ignorieren.
GitHub sendet Ihnen eine E-Mail, um die von Ihnen angegebene Adresse zu bestätigen.
Fahren Sie fort indem Sie die erhaltene E-Mail bestätigen; das ist ziemlich wichtig, wie wir später sehen werden.

[NOTE]
====
GitHub bietet fast alle Funktionen kostenlos an, mit Ausnahme einiger erweiterter Funktionen.

Die kostenpflichtigen Tarife von GitHub umfassen erweiterte Tools und Funktionen sowie erhöhte Limits für kostenlose Dienste. Diese werden in diesem Buch jedoch nicht behandelt.
Weitere Informationen zu verfügbaren Tarifen und deren Vergleich erhalten Sie unter https://de.github.com/pricing.html[^].
====

Wenn Sie auf das Octocat-Logo oben links auf dem Bildschirm klicken, gelangen Sie zu Ihrer Dashboard-Seite.
Sie sind ab sofort in der Lage, GitHub zu benutzen.

==== SSH-Zugang

(((SSH Schlüssel, mit GitHub)))
Ab sofort können Sie sich uneingeschränkt mit Git-Repositorys über das `https://` Protokoll verbinden und sich mit dem gerade eingerichteten Benutzernamen und Passwort authentifizieren.
Um jedoch öffentliche Projekte einfach zu klonen, müssen Sie sich nicht einmal anmelden – das Konto, das wir gerade erstellt haben, kommt ins Spiel, wenn wir Projekte forken und später zu unseren Forks wechseln.

Wenn Sie SSH-Remotes verwenden möchten, müssen Sie einen öffentlichen Schlüssel konfigurieren
Falls Sie noch keinen haben, siehe <<ch04-git-on-the-server#_generate_ssh_key,öffentlichen SSH-Schlüssel generieren>>.
Öffnen Sie Ihre Kontoeinstellungen über den Link oben rechts im Fenster:

.Der Link „Account-Einstellungen“
image::images/account-settings.png[Der Link „Account-Einstellungen“]

Wählen Sie dann auf der linken Seite den Bereich „SSH-Schlüssel“.

.Der Link „SSH-Schlüssel“
image::images/ssh-keys.png[Der Link „SSH-Schlüssel“]

Klicken Sie von dort aus auf die Schaltfläche „Add an SSH key“, geben Sie Ihrem Schlüssel einen Namen, fügen Sie den Inhalt Ihrer `~/.ssh/id_rsa.pub` Public-Key-Datei (oder wie auch immer Sie sie genannt haben) in das Textfeld ein und klicken Sie auf „Add key“.

[NOTE]
====
Achten Sie darauf, dass Sie Ihrem SSH-Schlüssel einen Namen geben, an den Sie sich gut erinnern können.
Sie können jeden Ihrer Schlüssel (z.B. „Mein Laptop“ oder „Arbeitskonto“) benennen, so dass Sie, falls Sie einen Schlüssel später widerrufen müssen, leicht erkennen können, nach welchem Sie suchen.
====

[[_personal_avatar]]
==== Ihr Avatar-Bild

Als nächstes können Sie, wenn Sie möchten, den für Sie generierten Avatar durch ein Bild Ihrer Wahl ersetzen.
Gehen Sie zunächst auf die Registerkarte „Profil“ (oberhalb der Registerkarte SSH-Schlüssel) und klicken Sie auf „Neues Bild hochladen“.

.Der Link „Profile“
image::images/your-profile.png[Der Link „Profile“]

In diesem Beispiel wählen wir eine Kopie des Git-Logos, das sich auf unserer Festplatte befindet und anschließend haben wir die Möglichkeit, es zu beschneiden.

.Ihr Avatar-Bild beschneiden
image::images/avatar-crop.png[Ihr Avatar-Bild beschneiden]

Nun sehen die Betrachter überall dort, wo Sie auf der Website agieren, Ihr Avatar-Bild neben Ihrem Benutzernamen.

Wenn Sie bei dem beliebten Gravatar-Dienst ( der oft für Wordpress-Konten verwendet wird) einen Avatar hochgeladen haben, wird dieser standardmäßig verwendet und Sie müssen diesen Schritt nicht mehr ausführen.

==== Ihre Email-Adressen

GitHub bildet Ihre Git Commits auf Ihren Account ab, wobei die Zuordnung per E-Mail erfolgt.
Wenn Sie mehrere E-Mail-Adressen in Ihren Commits verwenden und möchten, dass GitHub diese korrekt verknüpft, müssen Sie alle von Ihnen verwendeten E-Mail-Adressen in den E-Mail-Bereich des Admin-Bereichs aufnehmen.

[[_add_email_addresses]]
.E-Mail-Adressen hinzufügen
image::images/email-settings.png[E-Mail-Adressen hinzufügen]

Unter <<_add_email_addresses,E-Mail-Adressen hinzufügen>> können Sie den Status einer E-Mail Adresse ersehen, einige der verschiedenen, möglichen Stadien sind oben abgebildet.
Die oberste Adresse ist verifiziert und als Hauptadresse (engl. Primary) eingestellt, d.h. an diese Adresse gehen alle Benachrichtigungen und Empfangsbestätigungen.
Die zweite Adresse ist verifiziert und kann, wenn Sie sie wechseln möchten, als primär eingestellt werden.
Die letzte Adresse ist noch nicht verifiziert, was bedeutet, dass Sie sie nicht zu Ihrer Hauptadresse machen können.
Wenn GitHub eine davon in Commit-Nachrichten in einem beliebigen Repository auf der Website sieht, wird sie jetzt mit Ihrem Benutzer-Konto verknüpft.

==== Zwei-Faktor-Authentifizierung

Schließlich sollten Sie aus Sicherheitsgründen auf jeden Fall die Two-Factor-Authentifizierung oder „2FA“ einrichten.
Die Zwei-Faktor-Authentifizierung ist ein Authentifizierungs-Mechanismus, der in letzter Zeit immer beliebter wird, damit das Risiko verringert wird, dass Ihr Account durch den Diebstahl Ihres Passworts Schaden erleidet.
Wenn Sie die Funktion einschalten, fragt Sie GitHub nach zwei verschiedenen Authentifizierungsmethoden, so dass ein Angreifer, wenn eine davon beschädigt wird, nicht in der Lage sein wird, auf Ihr Konto zuzugreifen.

Sie finden die Einrichtung der Zwei-Faktor-Authentifizierung unter der Registerkarte „Security“ in Ihren Kontoeinstellungen.

.„2FA“ auf der Security-Registerkarte
image::images/2fa-1.png[„2FA“ auf der Security-Registerkarte]

Wenn Sie auf die Schaltfläche „Zwei-Faktor-Authentifizierung einrichten“ klicken, gelangen Sie zu einer Konfigurationsseite, auf der Sie eine Handy-App wählen können, um Ihren sekundären Code zu generieren (ein „zeitbasiertes Einmalpasswort“), oder Sie können sich bei jedem Login von GitHub einen Code per SMS zusenden lassen.

Nachdem Sie sich für eine der beiden Methoden entschieden haben und den Anweisungen zur Einrichtung von 2FA gefolgt sind, ist Ihr Konto etwas sicherer und Sie müssen bei jedem Login in GitHub einen zusätzlichen Code neben Ihrem Passwort eingeben.
