[[ch10-git-internals]]
== Git Interna

Möglicherweise bist du von einem der vorherigen Kapitel direkt zu diesem Kapitel gesprungen. Oder aber du bist jetzt hier gelandet, nachdem du das gesamte Buch chronologisch bis zu diesem Punkt gelesen hast. Wie auch immer, wir werden hier das Innenleben und die Implementierung von Git behandeln.
Wir finden, dass das Verstehen dieser Informationen von grundlegender Bedeutung ist, um zu verstehen, wie hilfreich und extrem leistungsfähig Git ist. Andere haben jedoch argumentiert, dass es für Anfänger verwirrend und unnötig komplex sein kann.
Daher haben wir diese Informationen zum letzten Kapitel des Buches gemacht, damit du sie früher oder später in deinem Lernprozess lesen kannst.
Wir überlassen es dir, das zu entscheiden.

Jetzt wo du hier bist, lass uns anfangen.
Erstens, wenn es noch nicht klar ist, ist Git grundsätzlich ein inhalts-adressierbares Dateisystem mit einer aufgesetzten VCS-Benutzeroberfläche.
Du wirst in Kürze mehr darüber erfahren, was dies bedeutet.

In den Anfängen von Git (meist vor 1.5) war die Benutzerschnittstelle sehr viel komplexer, da dieses Dateisystem mehr im Vordergrund stand als ein hochglänzendes VCS.
In den letzten Jahren wurde die Benutzerschnittstelle weiterentwickelt, bis sie so aufgeräumt und benutzerfreundlich ist wie in vielen anderen Systemen auch. Die Vorurteile gegenüber der früheren Git-Benutzerschnittstelle, die komplex und schwierig zu erlernen war, blieben jedoch erhalten.

Die inhalts-adressierbare Dateisystemschicht ist erstaunlich abgefahren, deshalb werden wir es als Erstes in diesem Kapitel behandeln. Anschließend lernst du die Transportmechanismen und die Repository-Wartungsaufgaben kennen, mit denen du dich möglicherweise befassen musst.

include::book/10-git-internals/sections/plumbing-porcelain.asc[]

include::book/10-git-internals/sections/objects.asc[]

include::book/10-git-internals/sections/refs.asc[]

include::book/10-git-internals/sections/packfiles.asc[]

include::book/10-git-internals/sections/refspec.asc[]

include::book/10-git-internals/sections/transfer-protocols.asc[]

include::book/10-git-internals/sections/maintenance.asc[]

include::book/10-git-internals/sections/environment.asc[]

=== Zusammenfassung

Zu diesem Zeitpunkt solltest du ein ziemlich gutes Verständnis dafür haben, was Git im Hintergrund macht und bis zu einem gewissen Grad auch, wie es implementiert ist.
Dieses Kapitel hat eine Reihe von Basisbefehlen behandelt – Befehle, mehr Low-Level sind als die Standardbefehle, die du im Rest des Buches kennengelernt hast.
Wenn du verstehst, wie Git auf einer niedrigeren Ebene funktioniert, solltest du leichter verstehen, warum es das tut, was es tut. Du kannst nun deine eigenen Tools und Hilfsskripten schreiben, damit dein spezifischer Workflow für dich funktioniert.

Git als inhalts-adressierbares Dateisystem ist ein sehr leistungsfähiges Tool, das du problemlos als mehr als nur ein einfaches VCS verwenden kannst.
Wir hoffen, dass du dein neu gewonnenes Wissen über Git-Interna nutzen kannst, um deine eigene coole Anwendung dieser Technologie zu implementieren und dich auf fortgeschrittenere Weise mit Git vertraut zu machen.
