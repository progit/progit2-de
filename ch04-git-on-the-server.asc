[[ch04-git-on-the-server]]
== Git auf dem Server

(((serving repositories)))
An dieser Stelle sollten Sie in der Lage sein, die meisten der täglichen Aufgaben zu erledigen, für die Sie Git verwenden werden.
Um jedoch in Git zusammenarbeiten zu können, benötigen Sie ein externes Git-Repository.
Obwohl Sie, technisch gesehen, Änderungen an und aus den individuellen Repositories verschieben können, ist das nicht empfehlenswert, da Sie sich ziemlich leicht irren könnten, woran sie arbeiten, wenn Sie nicht vorsichtig sind.
Darüber hinaus ist es vorteilhaft, dass Ihre Mitarbeiter auch dann auf das Repository zugreifen können, wenn Ihr Computer offline ist – ein zuverlässigeres gemeinsames Repository ist oft sinnvoll.
Daher ist die bevorzugte Methode für die Zusammenarbeit, einen Zwischenspeicher einzurichten, auf den beide Seiten Zugriff haben, und von dem aus sie Push-to and Pull ausführen können.

Das Betreiben eines Git-Servers ist recht unkompliziert.
Zuerst bestimmen Sie, welche Protokolle Ihr Server unterstützen soll.
Der erste Abschnitt dieses Kapitels behandelt die verfügbaren Protokolle und deren Vor- und Nachteile.
In den nächsten Abschnitten werden einige typische Setups mit diesen Protokollen erläutert und erklärt, wie Sie Ihren Server mit diesen Protokollen zum Laufen bringen.
Zuletzt werden wir ein paar gehostete Optionen durchgehen, wenn es Ihnen nichts ausmacht, Ihren Code auf dem Server eines anderen zu hosten und Sie nicht den Aufwand der Einrichtung und Wartung Ihres eigenen Servers auf sich nehmen wollen.

Wenn Sie keinen eigenen Server betreiben möchten, können Sie zum letzten Abschnitt dieses Kapitels springen, um einige Optionen zum Einrichten eines gehosteten Kontos zu finden und dann mit dem nächsten Kapitel fortfahren, in dem die verschiedenen Vor- und Nachteile der Arbeit in einer verteilten Versionskontrollumgebung erläutert werden.

Ein entferntes Repository ist in der Regel ein _„nacktes Repository“_ – ein Git-Repository, das kein Arbeitsverzeichnis hat.
Da das Repository nur als Kollaborationspunkt verwendet wird, gibt es keinen Grund, einen Snapshot auf die Festplatte speichern zu lassen; es enthält nur die Git-(Kontroll-)Daten.
Im einfachsten Fall besteht ein nacktes (eng. bare) Repository aus dem Inhalt des `.git` Verzeichnisses Ihres Projekts und nichts anderem.

include::book/04-git-server/sections/protocols.asc[]

include::book/04-git-server/sections/git-on-a-server.asc[]

include::book/04-git-server/sections/generating-ssh-key.asc[]

include::book/04-git-server/sections/setting-up-server.asc[]

include::book/04-git-server/sections/git-daemon.asc[]

include::book/04-git-server/sections/smart-http.asc[]

include::book/04-git-server/sections/gitweb.asc[]

include::book/04-git-server/sections/gitlab.asc[]

include::book/04-git-server/sections/hosted.asc[]

=== Zusammenfassung

Sie haben mehrere Möglichkeiten, ein entferntes Git-Repository in Betrieb zu nehmen, damit Sie mit anderen zusammenarbeiten oder Ihre Arbeit teilen können.

Der Betrieb eines eigenen Servers gibt Ihnen viel Kontrolle und ermöglicht es Ihnen, den Server innerhalb Ihrer eigenen Firewall zu betreiben, aber ein solcher Server benötigt in der Regel einen angemessenen Teil Ihrer Zeit für die Einrichtung und Wartung.
Wenn Sie Ihre Daten auf einem gehosteten Server ablegen, ist es einfach, sie einzurichten und zu warten; Sie müssen aber die Möglichkeit haben, Ihren Code auf fremden Servern zu speichern, und einige Unternehmen erlauben das nicht.

Es sollte ziemlich einfach sein, festzustellen, welche Lösung oder Kombination von Lösungen für Sie und Ihr Unternehmen am besten geeignet ist.
